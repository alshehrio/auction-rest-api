FORMAT: 1A
HOST: https://172.20.162.184:17012/auction


# Auction REST API v1.0

The Auction API provides a list of API for developers to interact with Auction system.
 
## HTTP request headers

The following is a mandatory header tags, that must be sent with each request.
  * `content-type` - The format of the request body - only application/json is supported at this time
  * `accept-language` - The language that you want the descriptions returned in - eg. en/ar.
  * `channel-name` - The channel name - example web,mobile.
  * `client-ip`  - The ip address of client.
  * `user-agent` - The app version of the mobile application that tries to consume the API.
  * `api-version` - The API version of auction application - eg. v1.
  * `authorization` - HTTP basic authentication. We use a HTTP header where we add 
                     'username:password' encoded in base64, you have to add '<B>Basic</B>' as a static prefix with each encoded credential - 
                      <P><B> example - authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ= </B></P>
                      
  
## HTTP response codes

  * `200` - The request completed OK
  * `201` - The specified object was created sucessfully
  * `204` - The request completed OK (No Content)
  * `400` - The request was not understood
  * `401` - authentication failed or user doesn't have permissions for requested operation.
  * `403` - You do not have access to the requested object
  * `404` - The object that was requested doesn't exist
  * `405` - The resource exists, but the wrong method was used. 
  * `500` - There was an internal API error
  * `501` - You have used a method (GET/PUT/POST/PATCH) not supported by this endpoint
  
## HTTP response headers

  * `content-type` - The format of the response body - only application/json is supported at this time
  * `cache-control` - used to specify directives for caching mechanisms in both requests and responses
  * `content-language` - describe the language(s) intended for the audience.
  * `date` -the date and time at which the message was originated.
  
# API catalog

list of all APIs and their respective owners

<table>
    <tr>
        <td> OCP APIs</td>
        <td> <ul style="list-style-type:number">
              <li>Categories Collection </li>
              <li>Categories Detail</li>
              <li>Products Collection </li>
              <li>Products Detail </li>
              <li>Bids Collection </li>
            </ul> </td>   
    </tr>
    <tr>
        <td> Auction Admin API's</td>              
        <td> <ul style="list-style-type:number">
              <li>User Collection</li>
              <li>Users Detail</li>
              <li>Groups Collection</li>
              <li>Update Category</li>
            </ul> </td> 
    </tr>
    <tr>
        <td>Payment API's</td>              
        <td> <ul style="list-style-type:number">
              <li>Batches Batches Collection </li>
              <li>Payments Reconcile Collection</li>
            </ul> </td> 
    </tr>
</table>

## User Collection [/users]

### Get User [GET]

Get All Users

+ Response 200 (application/json)

        {
          "users": [
            {
              "username": "ocp",
              "groups": [
                {
                  "id": 1,
                  "name": "auction",
                  "authorities": [
                    {
                      "id": 1,
                      "name": "ADMIN"
                    }
                  ]
                }
              ],
              "enabled": false
            },
            {
              "username": "payment",
              "groups": [
                {
                  "id": 46,
                  "name": "TEST_GROUP",
                  "authorities": [
                    {
                      "id": 1,
                      "name": "ADMIN"
                    }
                  ]
                }
              ],
              "enabled": false
            }
          ]
        }

### Add User [POST]
Add User

+ Request (application/json)
    
    + Body

            {
              "username": "test1234",
              "password": "Aa123456",
              "enabled": false,
              "groups": [
                {
                  "id": 1
                }
              ]
            }
            
+ Response 201 (application/json)

        {
            "username": "test1234",
            "groups": [
                {
                    "id": 1,
                    "name": "auction",
                    "authorities": [
                        {
                            "id": 1,
                            "name": "ADMIN"
                        }
                    ]
                }
            ],
            "enabled": false
        }


+ Response 400 (application/json)

    **Error Code:**
    - USER_ALREADY_EXIST
    - GROUP_NOT_FOUND
    
    + Attributes
        + errorCode (string) - Auction error code 
        + message (string) -  customer message returned by the auction API.
    
    + Body
    
            {
                "errorCode": "GROUP_NOT_FOUND",
                "message": "GROUP_NOT_FOUND"
            }
            

## Users Detail [/users/{username}]
+ Parameters
    + username: `test` (string, required) - username.

### Update User Status [PATCH]

Update user active status


+ Request (application/json)

        {
          "enabled": false,
          "groups": [
            {
              "id": 1
            }
          ]
        }
            
+ Response 200 (application/json)

            {
                "username": "test",
                "groups": [
                    {
                        "id": 1,
                        "name": "auction",
                        "authorities": [
                            {
                                "id": 1,
                                "name": "ADMIN"
                            }
                        ]
                    }
                ],
                "enabled": false
            }


+ Response 400 (application/json)

    **Error Code:**
    - GROUP_NOT_FOUND
    
    + Attributes
        + errorCode (string) - Auction error code 
        + message (string) -  customer message returned by the auction API.
    
    + Body
    
            {
                "errorCode": "GROUP_NOT_FOUND",
                "message": "GROUP_NOT_FOUND"
            }
            
## Groups Collection [/groups]

### List all Groups [GET]  

Get All groups

+ Response 200 (application/json)

            {
                "groups": [
                    {
                        "id": 1,
                        "name": "auction",
                        "authorities": [
                            {
                                "id": 1,
                                "name": "ADMIN"
                            }
                        ]
                    }
                ]
            }

            
## Categories Collection [/categories]     

### List all Categorires [GET]  

Return list of all Categorires

+ Request (application/json)

    + Headers

            Accept-Language: en
            
+ Response 200 (application/json)

        {
          "Categories": [
            {
              "id": 2,
              "name": "Diamond",
              "minimumIncrement": 200,
              "links": {
                "self": {
                  "href": "http://auction.stc.com.sa/category/2"
                }
              }
            },
            {
              "id": 1,
              "name": "Gold",
              "minimumIncrement": 200,
              "links": {
                "self": {
                  "href": "http://auction.stc.com.sa/category/1"
                }
              }
            }
          ]
        }

## Categories Detail [/categories/{id}]     

+ Parameters
    + id: `1` (number, required) - Id of a Category.
    
### Retrieve a Category [GET]  

Returns a single Category

+ Request (application/json)

    + Headers

            Accept-Language: en
            
+ Response 200 (application/json)

            {
               "id":2,
               "name": "Diamond",
               "minimumIncrement": 200,
               "depositAmount":1000,
               "isAutoBidAllowed" : "true",
               "isPurchaseAllowed" : "true",
               "purchasePrice":100000,
               "numberOfBidToStartAutoBid" : 25,
               "purchaseDisablePercentege" : 80
            }
            
+ Response 500 (application/json)


    + Attributes
        + errorCode (string) - Auction error code 
        + message (string) -  customer message returned by the auction API.
        
    + Body      
    
            {
                "errorCode": "AUC006",
                "message": "Element Not found."
            }
        

### Update a Category [PUT]

+ Request (application/json)

    + Headers

            Accept-Language: en
            
    + Body
            
            {   
               "arabicName": "ماسي",
               "englishName": "Diamond",
               "minimumIncrement": 200,
               "depositAmount":1000,
               "isAutoBidAllowed" : "true",
               "isPurchaseAllowed" : "true",
               "purchasePrice":100000,
               "numberOfBidToStartAutoBid" : 25,
               "purchaseDisablePercentege" : 80
            }

+ Response 204 (application/json)

+ Response 500 (application/json)

## Products Collection [/products{?page,size,sort,order}]

### Add Products [POST]
Add list of products

+ Request (application/json)
    + Body
            
            {
              "startDate": "2017-11-19T12:4:00.000",
              "auctionNumbers": [
                {
                  "categoryId": 31,
                  "msisdn": "500008802"
                },
                {
                  "categoryId": 29,
                  "msisdn": "500009020"
                },
                {
                  "categoryId": 26,
                  "msisdn": "505555007"
                }
              ],
              "endDate": "2017-11-29T12:2:59.999",
              "batchId": "AUC1000057"
            }
+ Response 204


+ Response 500 (application/json)

    **Error Code:**
    - AUC008 : Auction Batches overlap is not allowed.
    - AUC009 : Invalid Request body.
    
    + Attributes
        + errorCode (string) - Auction error code 
        + message (string) -  customer message returned by the auction API.
    
    + Body
    
            {
                "errorCode": "AUC008",
                "message": "Auction Batches overlap is not allowed",
            }
                    
### List All Products [GET]

Return list of all products

+ Parameters
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 100
    + sort     (optional)
      + Default: `id`
      + Members
            + `price`
            + `numberOfBids`
            + `views` 
            + `id`
    + order     (optional)
      + Default: `ASC`
      + Members
            + `ASC`
            + `DESC`
    
+ Response 200 (application/json)
 
        {
          "products": [
            {
              "id": 1001,
              "msisdn": "533996655",
              "currentPrice": 8000,
              "productStatus": "sold",
              "category": {
                "id": 1,
                "name": "Gold",
                "minimumIncrement": 200,
                "links": {
                  "self": {
                    "href": "http://auction.stc.com.sa/category/1"
                  }
                }
              },
              "links": {
                "self": {
                  "href": "http://auction.stc.com.sa/products/1001"
                }
              }
            },
            {
              "id": 1002,
              "msisdn": "5399999999",
              "currentPrice": 8000,
              "productStatus": "new",
              "category": {
                "id": 2,
                "name": "Diamond",
                "minimumIncrement": 200,
                "links": {
                  "self": {
                    "href": "http://auction.stc.com.sa/category/2"
                  }
                }
              },
              "links": {
                "self": {
                  "href": "http://auction.stc.com.sa/products/1002"
                }
              }
            }
          ],
          "links": {
            "self": {
              "href": "http://auction.stc.com.sa/products?page=1&size=2"
            },
            "first": {
              "href": "http://auction.stc.com.sa/products?page=0&size=2"
            },
            "prev": {
              "href": "http://auction.stc.com.sa/products?page=0&size=2"
            },
            "next": {
              "href": "http://auction.stc.com.sa/products?page=2&size=2"
            },
            "last": {
              "href": "http://auction.stc.com.sa/products?page=49&size=2"
            }
          },
          "page": {
            "size": 2,
            "totalElements": 100,
            "totalPages": 50,
            "number": 1
          }
        }
  
 
## Products Detail [/products/{id}{?nationalId}]     

### View a product detail [GET]

Return a single product detail resource.

+ Parameters

    + id: `1001` (number, required) - Id of a product.
    + nationalId:`1` (optional) - send nationalId if you looking for customer status. 
                                        
+ Response 200 (application/json)

    + Attributes  
        + id (string) - Id of a product.
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + expiryDate  (string) - auction expiry date.
        + numberOfBids (number) - totale number of bids.
        + isAutoBidAllowed  (string) - return if auto bid featuer enabled or disable
        + productStatus (enum[string]) - return list of product status
            + Members
                + `sold` 
                + `new`
        + customerBidStatus (enum[string]) -  return list of bid status belongs to a specific customer, return none if no customer sent in the request 
            + Members
                + `noBid`
                + `highestBidder`
                + `outbid` 
        + category  - 
            + id  (number) - Id of a product.
            + name (string) - name of a category
            + minimumIncrement (string)  - category minimum Increment
      
    + Body
    
            {
              "id": 1001,
              "msisdn": "533996655",
              "currentPrice": 8000,
              "expiryDate": "12/13/2015 11:51:59.000000 AM",
              "numberOfBids": 15,
              "isAutoBidAllowed": false,
              "productStatus": "sold",
              "customerBidStatus": "noBid",
              "category": {
                "id":2,
                "name": "Diamond",
                "minimumIncrement": 200
                "links": {
                  "self": {
                    "href": "http://auction.stc.com.sa/category/1"
                  }
                }
              }
            }

+ Response 500 (application/json)

    + Attributes
        + errorCode (string) - Auction error code 
        + message (string) - customer message returned by the auction API.
            
    + Body
            
                {
                    "errorCode": "AUC006",
                    "message": "Element Not found"
                }

       
## Search  [/search{?page,size,msisdn}]

### Search [GET]

Return a list of all matched msisdn

+ Parameters
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 10
    + msisdn (number, optional)
    
+ Response 200 (application/json)

    + Attributes  
        
        + msisdn (string) - The auction number

    + Body  
        
            {
              "products": [
                {
                  "msisdn": "50000655",
                  "links": {
                    "self": {
                      "href": "http://auction.stc.com.sa/products/1"
                    }
                  }
                },
                {
                  "msisdn": "533996655",
                  "links": {
                    "self": {
                      "href": "http://auction.stc.com.sa/products/2"
                    }
                  }
                }
              ],
              "links": {
                "self": {
                  "href": "http://auction.stc.com.sa/products?page=1&size=2"
                },
                "first": {
                  "href": "http://auction.stc.com.sa/products?page=0&size=2"
                },
                "prev": {
                  "href": "http://auction.stc.com.sa/products?page=0&size=2"
                },
                "next": {
                  "href": "http://auction.stc.com.sa/products?page=2&size=2"
                },
                "last": {
                  "href": "http://auction.stc.com.sa/products?page=49&size=2"
                }
              },
              "page": {
                "size": 2,
                "totalElements": 100,
                "totalPages": 50,
                "number": 1
              }
            }
            
## Bids Collection [/bids]

### Place a New Bids [POST]

You may create your own bid using this action. It takes a JSON
object containing a customer id and a amount of bid.


+ Request (application/json)


    + Headers

            Accept-Language: en
            
    + Body
            
            {
                "nationalId": 10999999,
                "regularBidAmount": 5000,
                "productId": 1
            }

+ Response 201 (application/json)

    + Attributes 
    
        + numberOfBids (number) - totale number of bids.
        + hasAutoBid  (string) - return weather of auto bid featuer enabled or disable
        + bidAmount (string) - return last bid amount.
        + customerBidStatus (enum[string]) -  return list of bid status belongs to a specific customer, return none if no customer sent in the request 
            + Members
                + `noBid`
                + `highestBidder`
                + `outbid` 

    + Body
    
            {
               "numberOfBids": 37,
               "bidAmount": 5000,
               "customerBidStatus": "highestBidder",
               "hasAutoBid":true
            }

+ Response 400 (application/json)
        
  **Error Code:**
    - DEPOSIT_NOT_PAID : customer didn't pay deposit payment.
    - CUSTOMER_IS_BLACKLISTED : customer is blacklisted in auction.
    - CUSTOMER_IS_HIGHEST_BIDDER : customer is already highest bidder.
    - AUCTION_IS_NOT_ACTIVE : Auction time is finished or not started yet.
    - BID_IS_LESS_THAN_MINIMUM_INCREMENT : Bid is less than minimum bid.
    - WRONG_BID_TYPE : bid type in request does not match auction bid type. (auto bid / regular bid) 
    
    + Attributes
        + errorCode (string) - Auction error code 
        + message (string) -  customer message returned by the auction API.
        
    + Body

                {
                    "errorCode": "DEPOSIT_NOT_PAID",
                    "message": "To complete the bidding process on this number, you must pay a deposit payment",
                }
                
## Batches Collection [/batches{?startDate,endDate}]

### List all Expired Batches  [GET]

Return list of all expired batches

+ Parameters
    + startDate  (date) - timestamp format yyyy-MM-dd'T'HH:mm:ss
    + endDate    (date) - timestamp format yyyy-MM-dd'T'HH:mm:ss

    
+ Request (application/json)

    + Headers

            Accept-Language: en
            
+ Response 200 (application/json)

        {
          "batches": [
            {
              "id": "AUC0003",
              "endDate": "2017-05-24T14:25:10",
              "startDate": "2017-05-24T14:25:10"
            },
            {
              "id": "AUC0004",
              "endDate": "2016-05-24T14:25:10",
              "startDate": "2017-05-24T14:25:10"
            }
          ]
        }

+ Response 400 (application/json)

  **Error Code:**
    - RANGE_ERROR : End date must me greater than start date.
    - TYPE_CONVERSION_ERROR : The value null of the field startDate is of the wrong type or the date format is incorrect.
 
    + Attributes
        + errorCode (string) - Auction error code 
        + message (string) -  message returned by the auction API.
        
    + Body

                {
                    "errorCode": "RANGE_ERROR",
                    "message": "End date must me greater than start date",
                }

+ Response 500 (application/json)


## Payments Reconcile Collection [/payments/reconcile{?batchId,transactionType}]

### List all Payments Reconcile Transaction [GET]

Return a list of all payment reconcile transaction for specific batch and transaction type

+ Parameters
    + batchId            (String, required)
    + transactionType    (enum[string]) 
        + Members
            + `capture` 
            + `reversal`
            
+ Response 200 (application/json)

        {
          "totalAmount": 999216,
          "totalTransactions": 424,
          "transactions": [
            {
              "id": "09b8acf0-9f08-43f3-9e54-ba6b6088b2cf",
              "amount": 1300,
              "date": "2017-04-25T15:05:33",
              "confirmationNumber": "STC-304399382"
            },
            {
              "id": "8095f868-9b2c-4100-b4b3-0b759e581506",
              "amount": 500,
              "date": "2017-04-25T07:08:36",
              "confirmationNumber": "STC-304393705"
            }
          ]
        }

+ Response 400 (application/json)

  **Error Code:**
    - MISSING_PARAM : Required PaymentTransactionType parameter "transactionType" is not present.
    - INVALID_BATCH_ID : Batch Id is null or invalid.
    - TYPE_MISMATCH : Type does not match on parameter transactionType expected value of type PaymentTransactionType, possible values: [capture, reversal]
    - INVALID_TRANSACTION_TYPE : TransactionType value is invalid.

    
    + Attributes
        + errorCode (string) - Auction error code 
        + message (string) -  customer message returned by the auction API.
        
    + Body

                {
                    "errorCode": "INVALID_BATCH_ID",
                    "message": "To complete the bidding process on this number,you must pay a deposit payment",
                }

+ Response 500 (application/json)

## Customer Collection [/Customer]

### Add customer [POST]
Used to the add\update customer in the auction.
The customer type must be individual, the corporate customer is not allowed to bid in the auction.  

+ Request (application/json)
    
    + Body

            {
                "nationalId": "1254897561",
                "emailAddress": "test@stc.com",
                "firstName": "test",
                "lastName": "test",
                "username": "test",
                "contactNumber": "0578595468"
            }
            
+ Response 201 (application/json)

+ Response 400 (application/json)
        
  **Error Code:**
    - INVALID_CUSTOMER_TYPE : The customer type must be individual
    - VALIDATION_ERROR : 
        
    + Body
    
            {
                "errorCode": "INVALID_CUSTOMER_TYPE",
                "message": "The customer type must be individual",
            }

+ Response 500 (application/json)