FORMAT: 1A
HOST: http://auction.stc.com.sa/ 


# Auction REST API v1.0

The Auction API provides a list of API for developers to interact with Auction system.
 
## HTTP request headers

The following is a mandatory header tag, that must be sent with each request.
  * Content-Type - The format of the request body - only application/json is supported at this time
  * Accept-Language - The language that you want the descriptions returned in.
  * Channel-Id -  The identity of the caller - only predefined allowed to consume service
  * Client-Ip -   The ip address of client.
  * App-Version - The version of the application that tries to consume services.
  
## HTTP response codes

  * 200 - The request completed OK
  * 201 - The specified object was created sucessfully
  * 204 - The request completed OK (No Content)
  * 400 - The request was not understood
  * 403 - You do not have access to the requested object
  * 404 - The object that was requested doesn't exist
  * 405 - The resource exists, but the wrong method was used. 
  * 500 - There was an internal API error
  * 501 - You have used a method (GET/PUT/POST/DELETE/etc) not supported by this endpoint
  
## HTTP response headers

  * Content-Type - The format of the response body eg. application/json

## Categories Collection [/v1/categories]     

### List all Categorires [GET]  

Returns a all Categorires

+ Request (application/json)

    + Headers

            Accept-Language: en
            
+ Response 200 (application/json)

        {
          "Categories": [
            {
              "id": 1,
              "name": "Diamond",
              "links": {
                "self": {
                  "href": "http://auction.stc.com.sa/v1/category/1"
                }
              }
            },
            {
              "id": 2,
              "name": "Gold",
              "links": {
                "self": {
                  "href": "http://auction.stc.com.sa/v1/category/2"
                }
              }
            }
          ]
        }

## Categories  [/v1/categories/{id}]     

+ Parameters
    + id: `1` (number, required) - Id of a Category.
    
### Retrieve a Category [GET]  

Returns a single Category

+ Request (application/json)

    + Headers

            Accept-Language: en
            
+ Response 200 (application/json)

            {
               "id":1
               "name": "Diamond",
               "minimumIncrement": 200,
               "depositAmount":1000,
               "features" : {
                    "purchasePrice":100000
               }
            }
            
+ Response 500 (application/json)

    + Attributes
        + code (string) - Auction error code 
        + reason (string) - Used to populate title user message
        + description(string) - Used to populate user message.
        
    + Body      
    
            "error":  
            {
                "code": "AUC006",
                "reason": "Not found!",
                "description": "Element Not found.",
            }
        

### Update a Category [PUT]

+ Request (application/json)

    + Headers

            Accept-Language: en
            
    + Body
            
            {   "id": 1
                "minimumIncrement": 1000,
                "depositAmount": 5000,
                "hasPurchasePrice": "true",
                "hasAutoBid": "true",
                "purchasePrice" : 10000
            }

+ Response 204 (application/json)

+ Response 500 (application/json)


## Products Collection [/v1/products{?page,size,sort,order,categoryId}]

### List All Products [GET]

Return list of all products

+ Parameters
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 100
    + sort     (optional)
      + Default: `id`
      + Members
            + `price`
            + `numberOfBids`
            + `views` 
            + `id`
    + order     (optional)
      + Default: `ASC`
      + Members
            + `ASC`
            + `DESC`
    + categoryId (number, optional)

    
+ Response 200 (application/json)
 
        {     
    
              
          "products": [
            {
              "id": 1001,
              "number": "533996655",
              "currentPrice": 8000,
              "productStatus": "sold|new",
              "category": {
                "categoryName": "Gold",
                "links": {
                  "self": {
                    "href": "http://auction.stc.com.sa/v1/category/1"
                  }
                }
              }
            },
            {
              "id": 1002,
              "number": "5399999999",
              "currentPrice": 8000,
              "productStatus": "sold|new",
              "category": {
                "categoryName": "Diamond",
                "links": {
                  "self": {
                    "href": "http://auction.stc.com.sa/v1/category/2"
                  }
                }
              }
            }
          ],
          "links": {
            "self": {
              "href": "http://auction.stc.com.sa/v1/products?page=1&size=2"
            },
            "first": {
              "href": "http://auction.stc.com.sa/v1/products?page=0&size=2"
            },
            "prev": {
              "href": "http://auction.stc.com.sa/v1/products?page=0&size=2"
            },
            "next": {
              "href": "http://auction.stc.com.sa/v1/products?page=2&size=2"
            },
            "last": {
              "href": "http://auction.stc.com.sa/v1/products?page=49&size=2"
            }
          },
          "page": {
            "size": 2,
            "totalElements": 100,
            "totalPages": 50,
            "number": 1
          }
        }
  
 
## Products  [/v1/products/{id}{?userId}]     

### View a product detail [GET]

Returns a single product

+ Parameters

    + id: `1001` (number, required) - Id of a product.
    + userId:  `anonymous` (optional) - 
        
+ Response 200 (application/json)

    + Attributes 
        + id (string) - Id of a product.
        + number (string) - auction number
        + currentPrice (string) - auction last price.
        + expiryDate  (string) - auction expiry date.
        + numberOfBids (number) - totale number of bids.
        + hasAutoBid  (string) - 
        + productStatus (enum[string]) - 
            + Members
                + `sold` 
                + `new`
        + userStatus (enum[string]) - 
            + Members
                + `noBid`
                + `highestBidder`
                + `outbid` 
                + `none`
        + category (object) - 
        
        
        
    + Body
    
            {
              "id": 1001,
              "number": "533996655",
              "currentPrice": 8000,
              "expiryDate": "12/13/2015 11:51:59.000000 AM",
              "numberOfBids": 15,
              "hasAutoBid": false,
              "productStatus": "sold",
              "userStatus": "none",
              "category": {
                "name": "Diamond",
                "minimumIncrement": 200
                "links": {
                  "self": {
                    "href": "http://auction.stc.com.sa/v1/category/1"
                  }
                }
              }
            }

+ Response 500 (application/json)

        + Attributes
            + code (string) - Auction error code 
            + reason (string) - Used to populate title user message
            + description(string) - Used to populate user message.
   
        + Body
   
            "error":  
            {
                "code": "AUC006",
                "reason": "Not found!",
                "description": "Element Not found",
            }

       
## Products Search  [/v1/products/search{?page,size,sort,order,categoryId,number,startPrice,endPrice}]

### Search [GET]

Return a list of all matched products

+ Parameters
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 100
    + sort     (optional)
      + Default: `id`
      + Members
            + `price`
            + `id`
            +  `number`
    + order     (optional)
      + Default: `ASC`
      + Members
            + `ASC`
            + `DESC`
    + categoryId (number, optional)
    + startPrice (number, optional)
    + endPrice (number, optional)
    + number (number, optional)
    
+ Response 200 (application/json)
 
        {     
    
              
          "products": [
            {
              "id": 1001,
              "number": "533996655",
              "currentPrice": 8000,
              "isSold": "false",
              "category": {
                "categoryName": "Gold",
                "links": {
                  "self": {
                    "href": "http://auction.stc.com.sa/v1/category/1"
                  }
                }
              }
            },
            {
              "id": 1002,
              "number": "5399999999",
              "currentPrice": 8000,
              "isSold": "false",
              "category": {
                "categoryName": "Diamond",
                "links": {
                  "self": {
                    "href": "http://auction.stc.com.sa/v1/category/2"
                  }
                }
              }
            }
          ],
          "links": {
            "self": {
              "href": "http://auction.stc.com.sa/v1/products?page=1&size=2"
            },
            "first": {
              "href": "http://auction.stc.com.sa/v1/products?page=0&size=2"
            },
            "prev": {
              "href": "http://auction.stc.com.sa/v1/products?page=0&size=2"
            },
            "next": {
              "href": "http://auction.stc.com.sa/v1/products?page=2&size=2"
            },
            "last": {
              "href": "http://auction.stc.com.sa/v1/products?page=49&size=2"
            }
          },
          "page": {
            "size": 2,
            "totalElements": 100,
            "totalPages": 50,
            "number": 1
          }

        }
        
## Bids Collection [/v1/products/{id}/bids]

+ Parameters
    + id: `1001` (number, required) - Id of a product.

### Place a New Bids [POST]

You may create your own bid using this action. It takes a JSON
object containing a user id and a amount of bid.


+ Request (application/json)


    + Headers

            Accept-Language: en
            
    + Body
            
            {
                "userId": 123,
                "bidAmount": 5000,
                "hasAutoBid": "true"
            }

+ Response 201 (application/json)

    + Attributes 
    
        + numberOfBids (number) - totale number of bids.
        + hasAutoBid  (string) - 
        + bidAmount (string) - 
        + userStatus (enum[string]) - 
            + Members
                + `noBid`
                + `highestBidder`
                + `outbid` 
                + `none`
        
    + Body
    
            {
               "numberOfBids": 37,
               "bidAmount": 5000,
               "userStatus": "highestBidder",
               "hasAutoBid":true
            }

+ Response 500 (application/json)
        
  **Error Code:**
    - AUC001 : User doesn't pay deposit payment.
    - AUC002 : User is blacklisted in auction.
    - AUC003 : User is already highest bidder.
    - AUC004 : Auction is not active.
    - AUC005 : Bid is less than minimum bid.
    - AUC007 : wrong bid type
    
    + Attributes
        + code (string) - Auction error code 
        + reason (string) - Used to populate title user message
        + description(string) - Used to populate user message.
        
    + Body

            {
                "error":  
                {
                    "code": "AUC001",
                    "reason": "Deposit Required",
                    "description": "To complete the bidding process on this number,you must pay a deposit payment",
                }
            }
            
### View last Bid [GET]

Returns a single bid

+ Request (application/json)

    + Attributes 
    
        + userId  (string) -  123|anonymous
        
   + Headers

            Accept-Language: en


    
    + Body
            
            {
                "userId": 123
            }
            
    
+ Response 200 (application/json)

    + Attributes 
    
        + numberOfBids (number) - totale number of bids.
        + hasAutoBid  (string) - 
        + bidAmount (string) - 
        + userStatus (enum[string]) - 
            + Members
                + `noBid`
                + `highestBidder`
                + `outbid` 
                + `none`

        + Body         
    
            {
               "numberOfBids": 37,
               "bidAmount": 5000,
               "hasAutoBid":true,
               "userStatus": "outbid"
            }