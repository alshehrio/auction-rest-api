FORMAT: 1A
HOST: http://172.20.162.198:17011/auction


# Auction REST API v1.0

The Auction API provides a list of API for developers to interact with Auction system.
 
## HTTP request headers

The following is a mandatory header tags, that must be sent with each request.
  * `content-type` - The format of the request body - only application/json is supported at this time
  * `accept-language` - The language that you want the descriptions returned in - eg. en/ar.
  * `channel-name` - The channel name - example web,mobile.
  * `client-ip`  - The ip address of client.
  * `user-agent` - The app version of the mobile application that tries to consume the API.
  * `api-version` - The API version of auction application - eg. v1.
  * `authorization` - HTTP basic authentication. We use a HTTP header where we add 
                     'username:password' encoded in base64, you have to add '<B>Basic</B>' as a static prefix with each encoded credential.
                      <P><B> Example : </B></P> - `authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=` 
                      
  
## HTTP response codes

  * `200` - The request completed OK
  * `201` - The specified object was created sucessfully
  * `204` - The request completed OK (No Content)
  * `400` - The request was not understood
  * `401` - authentication failed or user doesn't have permissions for requested operation.
  * `403` - You do not have access to the requested object
  * `404` - The object that was requested doesn't exist
  * `405` - The resource exists, but the wrong method was used. 
  * `500` - There was an internal API error
  * `501` - You have used a method (GET/PUT/POST/PATCH) not supported by this endpoint
  
## HTTP response headers

  * `content-type` - The format of the response body - only application/json is supported at this time
  * `cache-control` - used to specify directives for caching mechanisms in both requests and responses
  * `content-language` - describe the language(s) intended for the audience.
  * `date` -the date and time at which the message was originated.
  
## Error

In the responses for failed requests, Auction returns HTTP `4XX` or `5XX` status codes.

In addition, the Auction API can return the following errors.

- `INTERNAL_SERVICE_ERROR` : an internal server error has occurred. Resend the request at another time.If this error persists, contact Auction Team Support.
- `TYPE_MISMATCH` : Type does not match on parameter 'parameter name' expected value of type 'parameter type', possible values: [value 1, value 2, ..etc]
- `TYPE_CONVERSION_ERROR` : The value null of the parameter 'parameter name' is of the wrong type or the 'parameter name' format is incorrect.
- `MISSING_PARAMETER` : Required PaymentTransactionType parameter "transactionType" is not present.

For all errors except validation errors, auction returns an error response body in following format:

     
```
{
    "errorCode": "ERROR_NAME",
    "message"  : "ERROR_MESSAGE"
}
```


##  Validation errors

For validation errors `VALIDATION_ERROR`, Auction returns the HTTP `400 Bad Request` status code.

The server could not understand the request. Indicates one of these conditions:

* The API cannot convert the payload data to the underlying data type.
* The data is not in the expected data format.
* A required field is not available.
* A simple data validation error occurred.


The response body for validation errors includes additional error details in following format:

```
{
  "errorCode": "VALIDATION_ERROR",
  "fieldErrors": [
    {
      "field": "email",
      "message": "may not be null"
    }
  ]
}

```



## API Catalog

list of all APIs and their respective owners

<table>
    <tr>
        <td> OCP APIs</td>
        <td> <ul style="list-style-type:number">
              <li>List all Categories</li>
              <li>Add Products </li>
              <li>List All Products </li>
              <li>Get Product Details</li>
              <li>Search</li>
              <li>Please Bid</li>
              <li>Add Customer</li>
              <li>List All Products by Category</li>
            </ul> </td>   
    </tr>
    <tr>
        <td> Auction Admin API's</td>              
        <td> <ul style="list-style-type:number">
              <li>Get User</li>
              <li>Add User</li>
              <li>Update User</li>
              <li>List All Group</li>
              <li>Get Category</li>
              <li>Update Category</li>
            </ul> </td> 
    </tr>
    <tr>
        <td>Payment API's</td>              
        <td> <ul style="list-style-type:number">
              <li>Batches Batches Collection </li>
              <li>Payments Reconcile Collection</li>
            </ul> </td> 
    </tr>
</table>

# Group User

## User Collection [/users]

### Get User [GET]

Get All Users

+ Response 200 (application/json)

        {
          "users": [
            {
              "username": "ocp",
              "groups": [
                {
                  "id": 1,
                  "name": "auction",
                  "authorities": [
                    {
                      "id": 1,
                      "name": "ADMIN"
                    }
                  ]
                }
              ],
              "enabled": false
            },
            {
              "username": "payment",
              "groups": [
                {
                  "id": 46,
                  "name": "TEST_GROUP",
                  "authorities": [
                    {
                      "id": 1,
                      "name": "ADMIN"
                    }
                  ]
                }
              ],
              "enabled": false
            }
          ]
        }

### Add User [POST]
Add User

---
**Error Code:**
- `USER_ALREADY_EXIST`
- `GROUP_NOT_FOUND`

---
    
+ Request (application/json)
    
    + Body

            {
              "username": "test1234",
              "password": "Aa123456",
              "enabled": false,
              "groups": [
                {
                  "id": 1
                }
              ]
            }
            
+ Response 201 (application/json)

        {
            "username": "test1234",
            "groups": [
                {
                    "id": 1,
                    "name": "auction",
                    "authorities": [
                        {
                            "id": 1,
                            "name": "ADMIN"
                        }
                    ]
                }
            ],
            "enabled": false
        }


+ Response 400 (application/json)


     
## Users Detail [/users/{username}]
+ Parameters
    + username: `test` (string, required) - username.

### Update User [PATCH]

Update user active status

---
**Error Code:**
- `GROUP_NOT_FOUND`
---
+ Request (application/json)

        {
          "enabled": false,
          "groups": [
            {
              "id": 1
            }
          ]
        }
            
+ Response 200 (application/json)

            {
                "username": "test",
                "groups": [
                    {
                        "id": 1,
                        "name": "auction",
                        "authorities": [
                            {
                                "id": 1,
                                "name": "ADMIN"
                            }
                        ]
                    }
                ],
                "enabled": false
            }


+ Response 400 (application/json)


## Groups Collection [/groups]

### List all Groups [GET]  

Get All groups

+ Response 200 (application/json)

            {
                "groups": [
                    {
                        "id": 1,
                        "name": "auction",
                        "authorities": [
                            {
                                "id": 1,
                                "name": "ADMIN"
                            }
                        ]
                    }
                ]
            }    
            
# Group Customer

## Customer [/customers]

### Add customer [POST]
Used to the add or update customer in the auction.
The customer type must be individual. 
Note : CHECK WHEN WE CAN ADD CUSTOMER IN AUCTION. 



---
**Error Code:**
- `INVALID_NATIONAL_ID`.
---
+ Request (application/json)

             {
                "nationalId": "1254897561",
                "emailAddress": "test@stc.com",
                "firstName": "test",
                "lastName": "test",
                "username": "test",
                "contactNumber": "0578595468",
                "type": "s"
            }
            
+ Response 201 (application/json)

+ Response 400 (application/json)

   
+ Response 500 (application/json)

## Customer Eligibility [/customers/{nationalId}/eligibility]

### Customer eligibility [POST]

Used to check if the customer is blacklisted in auction.
OCP will check if the customer is blacklisted in STC, and maintain customer error messages in case of the customer is blacklisted in auction and STC.
otherwise OCP should send to auction the whether of customer eligibility in STC to return appropriate error message.
Also, who must check the customer type ? we accept only type (I/S) in auction. 

---
**Error Code:**

- `CUSTOMER_NOT_FOUND`.
 
---

+ Response 200 (application/json)

            {
               "isEligible": true
            }
            
+ Response 404 (application/json)
    
+ Response 400 (application/json)
  
+ Response 500 (application/json)


    
## Transfer Deposit [/customers/{nationalId}/deposit/transfer]

### Transfer Deposit [POST]
Used to the transfer a deposit from a product to another product

---
**Error Code:**
 
- `DEPOSIT_REVERSED` : deposit to be transfered has been reversed.
- `PRODUCT_IS_EXPIRED` : product is expired
- `DEPOSIT_TRANSFER_MUST_IN_SAME_CATEGORY` : transfer must be between products in same category
- `TRANSFER_BACK_NOT_ALLOWED` : user cannot transfer back to original product
- `HIGHEST_BIDDER_CANNOT_TRANSFER` : highest bidderse cannot transfer their deposit
- `TRANSFER_NOT_ALLOWED` : transfer not allowed
       
---
+ Parameters

    + nationalId: `2125487985` (number, required) - national Id of a customer.
    
+ Request (application/json)
    
    + Body

            {
                "fromProductId": 15,
                "toProductId": 45
            }
            
+ Response 201 (application/json)

+ Response 400 (application/json)
 
+ Response 500 (application/json)

# Group Category

## Categories Collection [/categories]     

### List all Categories [GET]  

Used to return a list of all available categories in the auction system.

+ Request (application/json)

    + Headers

            Accept-Language: en
            Authorization: Basic [Encoded channel user credential]
            
+ Response 200 (application/json)

        {
            "categories": [
                {
                    "name": "Bronze Numbers",
                    "id": 32
                },
                {
                    "name": "Diamond Numbers",
                    "id": 30
                },
                {
                    "name": "Gold Numbers",
                    "id": 27
                },
                {
                    "name": "Momaiz Numbers",
                    "id": 31
                },
                {
                    "name": "Silver Numbers",
                    "id": 28
                }
            ]
        }
        
## Categories Detail [/categories/{id}]     

+ Parameters
    + id: `1` (number, required) - Id of a Category.
    
### Get Category [GET]  

Returns a single Category

---
**Error Code:**
- `CATEGORY_NOT_FOUND` : category id not found.
---

+ Request (application/json)

    + Headers

            Accept-Language: en
            
+ Response 200 (application/json)

            {
               "id":2,
               "name": "Diamond",
               "minimumIncrement": 200,
               "depositAmount":1000,
               "isAutoBidAllowed" : "true",
               "isPurchaseAllowed" : "true",
               "purchasePrice":100000,
               "numberOfBidToStartAutoBid" : 25,
               "purchaseDisablePercentege" : 80
            }

+ Response 400 (application/json)
 
+ Response 500 (application/json)

### Update Category [PUT]

+ Request (application/json)

    + Headers

            Accept-Language: en
            
    + Body
            
            {   
               "arabicName": "ماسي",
               "englishName": "Diamond",
               "minimumIncrement": 200,
               "depositAmount":1000,
               "isAutoBidAllowed" : "true",
               "isPurchaseAllowed" : "true",
               "purchasePrice":100000,
               "numberOfBidToStartAutoBid" : 25,
               "purchaseDisablePercentege" : 80
            }

+ Response 204 (application/json)

+ Response 500 (application/json)



# Group Product

## Widget Collection [/widgets{?page,size,order}]   

### List All Widgets [GET]

Used to return a list of all auction widgets

+ Parameters
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 10
    + order     (optional)
      + Default: `ASC`
      + Members
            + `ASC`
            + `DESC`
    
+ Response 200 (application/json)
    
     + Attributes  
        + productId (string) - Id of a product.
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + productStatus (enum[string]) - return list of product status
            + Members
                + `sold` 
                + `new`
        + category  - 
            + id  (number) - Id of a product.
            + name (string) - name of a category

    + Body


            {
              "widgets": [
                {
                  "highestBids": [
                    {
                      "productId": 1001,
                      "msisdn": "533996655",
                      "currentPrice": 8000,
                      "productStatus": "sold",
                      "category": {
                        "Id": 27,
                        "name": "Bronze Numbers"
                      }
                    },
                    {
                      "productId": 1002,
                      "msisdn": "5399999999",
                      "currentPrice": 8000,
                      "productStatus": "new",
                      "category": {
                        "Id": 27,
                        "name": "Bronze Numbers"
                      }
                    }
                  ],
                  "mostBids": [
                    {
                      "productId": 1001,
                      "msisdn": "533996655",
                      "currentPrice": 8000,
                      "productStatus": "sold",
                      "category": {
                        "Id": 27,
                        "name": "Bronze Numbers"
                      }
                    },
                    {
                      "productId": 1002,
                      "msisdn": "5399999999",
                      "currentPrice": 8000,
                      "productStatus": "new",
                      "category": {
                        "Id": 27,
                        "name": "Bronze Numbers"
                      }
                    }
                  ],
                  "mostViewed": [
                    {
                      "productId": 1001,
                      "msisdn": "533996655",
                      "currentPrice": 8000,
                      "productStatus": "sold",
                      "category": {
                        "Id": 27,
                        "name": "Bronze Numbers"
                      }
                    },
                    {
                      "productId": 1002,
                      "msisdn": "5399999999",
                      "currentPrice": 8000,
                      "productStatus": "new",
                      "category": {
                        "Id": 27,
                        "name": "Bronze Numbers"
                      }
                    }
                  ]
                }
              ],
              "links": {
                "self": {
                  "href": "http://auction.stc.com.sa/products?page=1&size=2"
                },
                "first": {
                  "href": "http://auction.stc.com.sa/products?page=0&size=2"
                },
                "prev": {
                  "href": "http://auction.stc.com.sa/products?page=0&size=2"
                },
                "next": {
                  "href": "http://auction.stc.com.sa/products?page=2&size=2"
                },
                "last": {
                  "href": "http://auction.stc.com.sa/products?page=49&size=2"
                }
              },
              "page": {
                "size": 2,
                "totalElements": 100,
                "totalPages": 50,
                "number": 1
              }
            }
            
+ Response 400 (application/json)
+ Response 500 (application/json)

## Widget Details [/widgets/{widgetName}{?page,size,order}]   

### Get Widgets Details [GET]

Used to return a specific auction widgets

+ Parameters
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 10
    + widgetName     (required) - Possible Value for product widget
      + Members
            + `highestBids`
            + `mostBids`
            + `mostViewed` 
    + order     (optional)
      + Default: `ASC`
      + Members
            + `ASC`
            + `DESC`
    
+ Response 200 (application/json)
    
     + Attributes  
        + productId (string) - Id of a product.
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + productStatus (enum[string]) - return list of product status
            + Members
                + `sold` 
                + `new`
        + category  - 
            + id  (number) - Id of a product.
            + name (string) - name of a category
 
     + Body
    
            {
              "highestBids": [
                {
                  "productId": 1001,
                  "msisdn": "533996655",
                  "currentPrice": 8000,
                  "productStatus": "sold",
                  "category": {
                    "Id": 27,
                    "name": "Bronze Numbers"
                  }
                },
                {
                  "productId": 1002,
                  "msisdn": "5399999999",
                  "currentPrice": 8000,
                  "productStatus": "new",
                  "category": {
                    "Id": 27,
                    "name": "Bronze Numbers"
                  }
                }
              ],
              "links": {
                "self": {
                  "href": "http://auction.stc.com.sa/products?page=1&size=2"
                },
                "first": {
                  "href": "http://auction.stc.com.sa/products?page=0&size=2"
                },
                "prev": {
                  "href": "http://auction.stc.com.sa/products?page=0&size=2"
                },
                "next": {
                  "href": "http://auction.stc.com.sa/products?page=2&size=2"
                },
                "last": {
                  "href": "http://auction.stc.com.sa/products?page=49&size=2"
                }
              },
              "page": {
                "size": 2,
                "totalElements": 100,
                "totalPages": 50,
                "number": 1
              }
            }
            
+ Response 400 (application/json)
+ Response 500 (application/json)

## Products  [/products{?page,size,sort,order}]

### Add Products [POST]

Add a list of auctions

---
**Error Code:**
- `OVERLAP_NOT_ALLOWED` : Auction Batches overlap is not allowed.
---
+ Request (application/json)
    + Body
            
            {
              "startDate": "2017-11-19T12:4:00",
              "auctionNumbers": [
                {
                  "categoryId": 31,
                  "msisdn": "500008802"
                },
                {
                  "categoryId": 29,
                  "msisdn": "500009020"
                },
                {
                  "categoryId": 26,
                  "msisdn": "505555007"
                }
              ],
              "endDate": "2017-11-29T12:2:59",
              "batchId": "AUC1000057"
            }
            
+ Response 204


+ Response 500 (application/json)

## Products Collection [/categories/{id}/product{?page,size,sort,order}]

### List All Products by category [GET]

Return a list of all products in a specific category

---
**Error Code:**
- `INVALID_CATEGORY_ID` : category id is null or invalid.
---
+ Parameters
    
    + id (number)
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 100
    + sort     (optional)
      + Default: `id`
      + Members
            + `price`
            + `numberOfBids`
            + `views` 
            + `id`
    + order     (optional)
      + Default: `ASC`
      + Members
            + `ASC`
            + `DESC`
    
+ Response 200 (application/json)

     + Attributes  
        + id (string) - Id of a product.
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + productStatus (enum[string]) - return list of product status
            + Members
                + `sold` 
                + `new`
        + category  - 
            + id  (number) - Id of a product.
            + name (string) - name of a category
            
    + Body            
        
            {
              "products": [
                {
                  "id": 1001,
                  "msisdn": "533996655",
                  "currentPrice": 8000,
                  "productStatus": "sold",
                  "category": { "Id": 27 , "name" : "Bronze Numbers" }
                },
                {
                  "id": 1002,
                  "msisdn": "5399999999",
                  "currentPrice": 8000,
                  "productStatus": "new",
                  "category": { "Id": 27 , "name" : "Bronze Numbers" }
                }
              ],
              "links": {
                "self": {
                  "href": "http://auction.stc.com.sa/products?page=1&size=2"
                },
                "first": {
                  "href": "http://auction.stc.com.sa/products?page=0&size=2"
                },
                "prev": {
                  "href": "http://auction.stc.com.sa/products?page=0&size=2"
                },
                "next": {
                  "href": "http://auction.stc.com.sa/products?page=2&size=2"
                },
                "last": {
                  "href": "http://auction.stc.com.sa/products?page=49&size=2"
                }
              },
              "page": {
                "size": 2,
                "totalElements": 100,
                "totalPages": 50,
                "number": 1
              }
            }
 
+ Response 400 (application/json)


  
 
## Products Detail [/categories/{categoryId}/products/{productId}{?nationalId}]     

### Get Product Detail [GET]

Return a single product detail resource.
Note : You don't need to include the levels above (category id), because product id is primary key ,  you've already got your specific object
+ Parameters

    + productId: `1001` (number, required) - Id of a product.
    + categoryId: `1001` (number, required) - Id of a category.
    + nationalId:`2154879542` (string, optional) - send nationalId if you looking for customer bid status. 
                                        
+ Response 200 (application/json)

    + Attributes  
        + id (string) - Id of a product.
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + expiryDate  (string) - auction expiry date.
        + numberOfBids (number) - totale number of bids.
        + isAutoBidAllowed  (string) - return if auto bid featuer allowed  
        + isProductInWatchlist - used to know the product in watchlist or not.
        + depositAmount - product deposit amount.
        + minimumIncrement (string)  - product minimum Increment
        + productStatus (enum[string]) - return list of product status
            + Members
                + `sold` 
                + `new`
        + customerBidStatus (enum[string]) -  return list of bid status belongs to a specific customer, return none if no customer sent in the request 
            + Members
                + `noBid`
                + `highestBidder`
                + `outbid` 
        + purchase  - 
            + isPurchaseAllowed  (boolean) - return if  product purchase featuer is allowed  
            + price (number)- fixed product price. 
            + depositAmount (number) - product deposit amount.
            
      
    + Body
    
            {
              "ProductId": 1001,
              "msisdn": "533996655",
              "currentPrice": 8000,
              "expiryDate": "12/13/2015 11:51:59.000000 AM",
              "numberOfBids": 15,
              "isAutoBidAllowed": false,
              "productStatus": "sold",
              "customerBidStatus": "noBid",
              "isProductInWatchlist" : true,
              "depositAmount": 300,
              "minimumIncrement": 200,
              "purchase": {
                "isPurchaseAllowed":true,
                "price": 800000,
                "depositAmount": 20000
              }
            }

+ Response 404 (application/json)
+ Response 400 (application/json)
+ Response 500 (application/json)

## Search Products [/search/products{?page,size,msisdn}]

### Search [GET]

Return a list of all matched msisdn

+ Parameters
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 10
    + msisdn (number)
    
+ Response 200 (application/json)

    + Attributes  
        
        + msisdn (string) - The auction number

    + Body  
        
            {
              "products": [
                {
                  "msisdn": "50000655",
                  "id" : 5
                  
                },
               {
                  "msisdn": "50000685",
                  "id" : 7
                  
                }
              ],
              "links": {
                "self": {
                  "href": "http://auction.stc.com.sa/products?page=1&size=2"
                },
                "first": {
                  "href": "http://auction.stc.com.sa/products?page=0&size=2"
                },
                "prev": {
                  "href": "http://auction.stc.com.sa/products?page=0&size=2"
                },
                "next": {
                  "href": "http://auction.stc.com.sa/products?page=2&size=2"
                },
                "last": {
                  "href": "http://auction.stc.com.sa/products?page=49&size=2"
                }
              },
              "page": {
                "size": 2,
                "totalElements": 100,
                "totalPages": 50,
                "number": 1
              }
            }

# Group Batch

## Batches Collection [/batches{?startDate,endDate}]

### List all Expired Batches  [GET]

Return list of all expired batches

---
**Error Code:**
- `RANGE_ERROR` : End date must me greater than start date.
     
---
+ Parameters
    + startDate  (date) - timestamp format yyyy-MM-dd'T'HH:mm:ss
    + endDate    (date) - timestamp format yyyy-MM-dd'T'HH:mm:ss

    
+ Request (application/json)

    + Headers

            Accept-Language: en
            
+ Response 200 (application/json)

        {
          "batches": [
            {
              "id": "AUC0003",
              "endDate": "2017-05-24T14:25:10",
              "startDate": "2017-05-24T14:25:10"
            },
            {
              "id": "AUC0004",
              "endDate": "2016-05-24T14:25:10",
              "startDate": "2017-05-24T14:25:10"
            }
          ]
        }

+ Response 400 (application/json)

+ Response 500 (application/json)


# Group Payment 

## Payments [/payments/{paymentMethod}]

### Add Payment [POST]

Used to add payment to auction. 

---
**Error Code For CC:**
- `INVALID_NATIONAL_ID` - customer national id is invalid.
- `INVALID_PRODUCT_ID` - product id is invalid.
- `INVALID_CUSTOMER_TYPE` - customer type is invalid.
- `PRODUCT_IS_EXPIRED` - product has expired. The product related to this request has expired.
- `DEPOSIT_NOT_PAID` - the deposit amount must be paid before attempt balance payment. 
- `BALANCE_ALREADY_PAID` - the customer already paid blance payment for this product.
- `PAYMENT_NOT_ALLOWED` - The payment related to this request not allowed
- `FEATURE_UNSUPPORTED_FOR_PRODCUT` - The feature is disabled or unsupported.
- `BIDDING_AMOUNT_EXCEEDED_FIXED_PRICE` - the bidding amount exceeded 80% of the product fixed price.
- `PENDING_PAYMENT_EXIST` - the product reserved from another buyer.
- `MAX_NUMBER_OF_ATTEMPTS_EXCEEDED` - You have exceeded the maximum number of bank transfer attempts.

---

+ Parameters
    + paymentMethod       (enum[string], required) 
        + Members
            + `creditCard`  
            + `bankTransfer` 
            
+ Attributes 
    + productId         (number, required)
    + nationalId        (number, required)
    + agreedTerms       (boolean, required)
    + transaction
        + id  (string, required) - payment transaction id
        + amount (number, required) - payment transaction amount 
        + confirmationNumber (string, required) - STC confirmation number,  optinal for bank Transfer payment method
        + date (string, required) - payment transaction date
        + type (enum[string], required) - transaction type
            + Members
                + `deposit`
                + `balance`
                + `purchase`
        + intent           (enum[string], required) 
            + Members
                + `sale`  - Makes an immediate payment
                + `authorize`- Authorizes a payment for capture later.
        + bankTranfer - required for bank Transfer payment method
            + bankId (number, required) -  bank id.
            + bankName (number, required) - customer bank name 
            + firstName (number, required) - transformer first name
            + lastName (number, required) -  transformer last name
        

+ Request (application/json)

        {
          "productId": 1001,
          "nationalId": "2154879562",
          "agreedTerms": true,
          "transaction": {
            "id": "09b8acf0",
            "amount": 1300,
            "date": "2017-04-25T15:05:33",
            "confirmationNumber": "STC-304399382",
            "type": "deposit",
            "intent": "sale"
          } , 
          "bankTranfer" {
           "bankId" : 12,
           "bankName" : "alinm" ,
           "firstName" : "first-name", 
           "lastName" : "last-name",
          }
        }

+ Response 201 (application/json)
+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)


## Payments Reconcile Collection [/payments/reconcile{?batchId,transactionType}]

### List all Payments Reconcile Transaction [GET]

Return a list of all payment reconcile transaction for specific batch and transaction type

---
**Error Code:**
- `INVALID_BATCH_ID` : Batch Id is null or invalid.
- `INVALID_TRANSACTION_TYPE` : TransactionType value is invalid.
---
+ Parameters
    + batchId            (String, required)
    + transactionType    (enum[string]) 
        + Members
            + `capture` 
            + `reversal`
            
+ Response 200 (application/json)

        {
          "totalAmount": 999216,
          "totalTransactions": 424,
          "transactions": [
            {
              "id": "09b8acf0-9f08-43f3-9e54-ba6b6088b2cf",
              "amount": 1300,
              "date": "2017-04-25T15:05:33",
              "confirmationNumber": "STC-304399382"
            },
            {
              "id": "8095f868-9b2c-4100-b4b3-0b759e581506",
              "amount": 500,
              "date": "2017-04-25T07:08:36",
              "confirmationNumber": "STC-304393705"
            }
          ]
        }

+ Response 400 (application/json)

+ Response 500 (application/json)


# Group Bid 
           
## Bids [/bids]

### Place Bid [POST]

You may create your own bid using this action. It takes a JSON
object containing a customer id and a amount of bid.

---
**Error Code:**
- `DEPOSIT_NOT_PAID` : customer didn't pay deposit payment.
- `CUSTOMER_IS_BLACKLISTED` : customer is blacklisted in auction.
- `AUCTION_IS_NOT_ACTIVE` : Auction time is finished or not started yet.
- `BID_IS_LESS_THAN_MINIMUM_INCREMENT` : Bid is less than minimum bid.
- `WRONG_BID_TYPE` : bid type in request does not match auction bid type. (auto bid / regular bid) 
---  
+ Request (application/json)


    + Headers

            Accept-Language: en
            
    + Body
            
            {
                "nationalId": 10999999,
                "regularBidAmount": 5000,
                "autoBidAmount" : null,
                "productId": 1
            }

+ Response 201 (application/json)

    + Attributes 
    
        + numberOfBids (number) - totale number of bids.
        + isAutoBidAllowed  (string) - return weather of auto bid featuer enabled or disable
        + currentPrice (string) - return latest bid amount.
        + customerBidStatus (enum[string]) -  return list of bid status belongs to a specific customer, return none if no customer sent in the request 
            + Members
                + `highestBidder`
                + `outbid` 

    + Body
    
            {
               "numberOfBids": 37,
               "currentPrice": 5000,
               "customerBidStatus": "highestBidder",
               "isAutoBidAllowed":true
            }

+ Response 400 (application/json)
        

    
 
 
# Group Watchlist

## Remove Watchlist [/watchlist/product{?productId,nationalId}]

### Remove Watchlist item [DELETE]

Used to remove an item from watchlist

---
**Error Code:**
- `INVALID_PRODUCT_ID` : product id is not valid 
- `INVALID_NATIONAL_ID` : customer id is not valid.
---
+ Parameters

    + nationalId: `21254879985` (number, required) - national Id of a customer.
    + productId: `1001` (number, required) - Id of a product.

            
+ Response 201 (application/json)

+ Response 400 (application/json)


+ Response 500 (application/json)
               
## Add Watchlist [/watchlist/product]

### Add watchlist item [POST]

Used to Add an item from watchlist
---
**Error Code:**

- `INVALID_PRODUCT_ID` : product id is not valid 
- `INVALID_NATIONAL_ID` : customer id is not valid 
- `MAX_NUMBER_OF_PRODUCTS_EXCEEDED`: max number of items in watchlist has been exceeded.
- `PRODUCT_IS_EXPIRED` : product is expired.
---

+ Request (application/json)
 
        {
            "productId": 15
        }    
            
+ Response 204 (application/json)

+ Response 400 (application/json)

+ Response 500 (application/json)

# Group Content
## Get Content [/content/{contentType}]

### Get Content Details [GET]
Used to get a spacific content in auction system,
Note That : OCP already has content APIs, I think it's OCP responsibility. 

---
**Error Code:**
- `INVALID_CONTENT_TYPE` : content type not exist 
---
+ Parameters
 
    + contentType    (enum[string]) 
        + Members
            + `FAQ` 
            + `TERMS_AND_CONDITION`
            + `BANK_LIST`
            + `PRIVACY_STATEMENT`
            + `BANK_TRANSFER_INFO`
            
+ Request (application/json)

        {
            "content": [
                {
                  "key": "How do I complete the payment after winning the number?",
                  "value": "Through clicking on Check your auctions icon, then choose the number and follow the payment instructions."
                },
                {
                  "key": "Are there maximum numbers that the customer can get?",
                  "value": "The maximum numbers for Saudis are 40 postpaid lines for all operators and 10 lines for non-Saudi customer."
                }
            ]
        }

+ Response 404 (application/json)

+ Response 400 (application/json)

+ Response 500 (application/json)