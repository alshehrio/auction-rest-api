FORMAT: 1A
HOST: http://172.20.162.198:17001/auction


# Auction 2 REST API v1.1

The Auction API provides a list of API for developers to interact with Auction system.
 
## HTTP request headers

The following is a mandatory header tags, that must be sent with each request.
  * `content-type` - The format of the request body - only application/json is supported at this time
  * `accept-language` - The language that you want the descriptions returned in - eg. en/ar.
  * `channel-name` - The channel name - example web,mobile.
  * `client-ip`  - The ip address of client.
  * `user-agent` - The app version of the mobile application that tries to consume the API.
  * `api-version` - The API version of auction application - eg. v1.
  * `authorization` - HTTP basic authentication. We use a HTTP header where we add 
                     'username:password' encoded in base64, you have to add '<B>Basic</B>' as a static prefix with each encoded credential.
                      <P><B> Example : </B></P> - `authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=` 
                      
  
## HTTP response codes

  * `200` - The request completed OK
  * `201` - The specified object was created sucessfully
  * `204` - The request completed OK (No Content)
  * `400` - The request was not understood
  * `401` - authentication failed or user doesn't have permissions for requested operation.
  * `403` - You do not have access to the requested object
  * `404` - The object that was requested doesn't exist
  * `405` - The resource exists, but the wrong method was used. 
  * `500` - There was an internal API error
  * `501` - You have used a method (GET/PUT/POST/PATCH) not supported by this endpoint
  
## HTTP response headers

  * `content-type` - The format of the response body - only application/json is supported at this time
  * `cache-control` - used to specify directives for caching mechanisms in both requests and responses
  * `content-language` - describe the language(s) intended for the audience.
  * `date` -the date and time at which the message was originated.
  
## General Errors

In the responses for failed requests, Auction returns HTTP `4XX` or `5XX` status codes.

In addition, the Auction API can return the following errors.

- `UNKNOWN_ERROR` : an internal server error has occurred. Resend the request at another time.If this error persists, contact Auction Team Support.
- `TYPE_MISMATCH` : Type does not match on parameter 'parameter name' expected value of type 'parameter type', possible values: [value 1, value 2, ..etc]
- `QUERY_PARAMETER_NOT_PRESENT` : Required parameter of name 'parameter name' with type "parameter type".
- `QUERY_PARAMETER_IS_NULL` :  Required parameter value cannot be null.

For all errors except validation errors, auction returns an error response body in following format:

     
```
{
    "errorCode": "ERROR_NAME",
    "message"  : "ERROR_MESSAGE"
}
```


##  Validation Errors

For validation errors `VALIDATION_ERROR`, Auction returns the HTTP `400 Bad Request` status code.

The server could not understand the request. Indicates one of these conditions:

* The API cannot convert the payload data to the underlying data type.
* The data is not in the expected data format.
* A required field is not available.
* A simple data validation error occurred.


The response body for validation errors includes additional error details in following format:

```
{
  "errorCode": "VALIDATION_ERROR",
  "fieldErrors": [
    {
      "field": "email",
      "message": "must not be null"
    }
  ]
}

```



## API Catalog

list of all APIs and their respective owners

<table>
    <tr>
        <td> OCP APIs</td>
        <td> <ul style="list-style-type:number">
              <li>Add Products </li>
              <li>Customer Eligibility</li>
              <li>List all Categories</li>
              <li>List all Products By Category</li>
              <li>Get Products Detail</li>
              <li>Add product to Watchlist</li>
              <li>Remove product from watchlist</li>
              <li>List all watchlist products</li>
              <li>Place Bid</li>
              <li>Get Payment Method List</li>
              <li>Place Payment</li>
              <li>Reversal Deposit</li>
              <li>Get Customer Deposit</li>
              <li>Transfer Deposit</li>
              <li>Get Widgets Details</li>
              <li>Get Customer Auction History Details</li>
              <li>Search</li>
            </ul> </td>   
    </tr>
    <tr>
        <td> Auction Admin API's</td>              
        <td> <ul style="list-style-type:number">
              <li>Get User</li>
              <li>Add User</li>
              <li>Update User</li>
              <li>List All Group</li>
              <li>Get Category</li>
              <li>Update Category</li>
            </ul> </td> 
    </tr>
    <tr>
        <td>Payment API's</td>              
        <td> <ul style="list-style-type:number">
              <li>Place Payment</li>
              <li>Batches Batches Collection </li>
              <li>Payments Reconcile Collection</li>
            </ul> </td> 
    </tr>
</table>

# Group User

## User Collection [/users]

### Get User [GET]

Get All Users

+ Response 200 (application/json)

        {
          "users": [
            {
              "username": "ocp",
              "groups": [
                {
                  "id": 1,
                  "name": "auction",
                  "authorities": [
                    {
                      "id": 1,
                      "name": "ADMIN"
                    }
                  ]
                }
              ],
              "enabled": false
            },
            {
              "username": "payment",
              "groups": [
                {
                  "id": 46,
                  "name": "TEST_GROUP",
                  "authorities": [
                    {
                      "id": 1,
                      "name": "ADMIN"
                    }
                  ]
                }
              ],
              "enabled": false
            }
          ]
        }

### Add User [POST]
Add User

---
**Error Code:**
- `USER_ALREADY_EXIST`
- `GROUP_NOT_FOUND`

---
    
+ Request (application/json)
    
    + Body

            {
              "username": "test1234",
              "password": "Aa123456",
              "enabled": false,
              "groups": [
                {
                  "id": 1
                }
              ]
            }
            
+ Response 201 (application/json)

        {
            "username": "test1234",
            "groups": [
                {
                    "id": 1,
                    "name": "auction",
                    "authorities": [
                        {
                            "id": 1,
                            "name": "ADMIN"
                        }
                    ]
                }
            ],
            "enabled": false
        }


+ Response 400 (application/json)


     
## Users Detail [/users/{username}]
+ Parameters
    + username: `test` (string, required) - username.

### Update User [PATCH]

Update user active status

---
**Error Code:**
- `GROUP_NOT_FOUND`
---
+ Request (application/json)

        {
          "enabled": false,
          "groups": [
            {
              "id": 1
            }
          ]
        }
            
+ Response 200 (application/json)

            {
                "username": "test",
                "groups": [
                    {
                        "id": 1,
                        "name": "auction",
                        "authorities": [
                            {
                                "id": 1,
                                "name": "ADMIN"
                            }
                        ]
                    }
                ],
                "enabled": false
            }


+ Response 400 (application/json)


## Groups Collection [/groups]

### List all Groups [GET]  

Get All groups

+ Response 200 (application/json)

            {
                "groups": [
                    {
                        "id": 1,
                        "name": "auction",
                        "authorities": [
                            {
                                "id": 1,
                                "name": "ADMIN"
                            }
                        ]
                    }
                ]
            }    
            
# Group Customer

## Customer Eligibility [/customers/{nationalId}/eligibility?{customerType}]

### Customer eligibility [GET]

Used to check if the customer is blacklisted in auction.
OCP will check if the customer is blacklisted in STC, and maintain customer error messages in case of the customer is blacklisted in auction and STC.
otherwise OCP should send to auction the whether of customer eligibility in STC to return appropriate error message.
Also, who must check the customer type ? we accept only type (I/S) in auction. 


---
**Error Code:**

- `INVALID_CUSTOMER_ID`: customer id is invalid. 
- `INVALID_CUSTOMER_TYPE` : customer type  is invalid.
 
---

+ Parameters
    + nationalId: `2154895231` (number, required) - customer national Id.
    + customerType: `s` (number, required) - customer type.
    
+ Response 200 (application/json)

            {
               "isEligible": true
            }
            
+ Response 404 (application/json)
    
+ Response 400 (application/json)
  
+ Response 500 (application/json)

## Customer Deposit Transfer [/customers/{nationalId}/deposit-transfer]
    
### Transfer Deposit [POST]
Used to the transfer a deposit from a product to another product

---
**Error Code:**
 
- `DEPOSIT_NOT_FOUND` : deposit to be transfered has been reversed.
- `PRODUCT_IS_EXPIRED` : one or both product are expired.
- `DEPOSIT_TRANSFER_MUST_IN_SAME_CATEGORY` : transfer must be between products in same category
- `TRANSFER_BACK_NOT_ALLOWED` : user cannot transfer back to original product
- `HIGHEST_BIDDER_CANNOT_TRANSFER` : highest bidderse cannot transfer their deposit
- `TRANSFER_NOT_ALLOWED` : transfer not allowed.
- `NATIONAL_ID_NOT_FOUND` : customer id not found.
- `INVALID_NATIONAL_ID` : customer id is null or invalid 
---
+ Parameters
    + nationalId: `2154895231` (number, required) - customer national Id.
    
+ Attributes 
    + fromProductId     (number, required)  
    + toProductId       (number, required)  
    
+ Request (application/json)
    
    + Body

            {
                "fromProductId": 15,
                "toProductId": 45
            }
            
+ Response 201 (application/json)

+ Response 400 (application/json)
 
+ Response 500 (application/json)

## Customer Deposit [/customers/{nationalId}/deposit?{categoryId}]

### Get Customer Deposit [GET]

Used to get all customer deposit.

---
**Error Code:**
 
- `NATIONAL_ID_NOT_FOUND` : customer id is not found. 
- `INVALID_NATIONAL_ID` : customer id is null or invalid. 
- `INVALID_CATEGORY_ID` : category id is null or invalid. 
       
---

+ Parameters
    + nationalId: `2154895231` (number, required) - customer national Id.
    + categoryId: `27` (number, required) - category Id .
    
+ Request (application/json)
 
+ Response 200 (application/json)

    + Attributes 
    
        + productId (number, required)  
        + msisdn   (number, required) 

    + Body
    
            {
               {
                "productId": 31,
                "msisdn": 0566666666
               },
               {
                "productId": 37,
                "msisdn": 0577778888
               }
            } 
 
     
+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

## Watchlist Collection [/customers/{nationalId}/watchlist{?page,size,sort,order}]

### List all watchlist products [GET]

Used to get all products in watchlist

---
**Error Code:**
- `INVALID_NATIONAL_ID` : customer id is null or invalid.
---

+ Parameters
    
    + nationalId (number, required) - national Id of a customer.
    + page       (number, optional)
      + Default: 0
    + size       (number, optional)
      + Default: 20
    + sort     (optional)
      + Default: `id`
      + Members
            + `price`
            + `numberOfBids`
            + `views` 
            + `id`
    + order     (optional)
      + Default: `ASC`
      + Members
            + `ASC`
            + `DESC`

+ Response 200 (application/json)

    + Attributes  
        + id (string) - Id of a product.
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + expiryDate  (string) - auction expiry date, timestamp format yyyy-MM-dd'T'HH:mm:ss
        + numberOfBids (number) - totale number of bids.
        + category  - 
            + id  (number) - Id of a category.
            + name (string) - name of a category
            
    + Body            
        
            {
              "products": [
                {
                  "id": 1001,
                  "msisdn": "533996655",
                  "currentPrice": 8000,
                  "expiryDate": "2017-05-24T14:25:10",
                  "numberOfBids": 15,
                  "category": { "Id": 27 , "name" : "Bronze Numbers" }
                },
                {
                  "id": 1002,
                  "msisdn": "533996655",
                  "currentPrice": 8000,
                  "expiryDate": "2017-05-24T14:25:10",
                  "numberOfBids": 15,
                  "category": { "Id": 27 , "name" : "Bronze Numbers" }
                }
              ],
              "links": {
                "self": {
                  "href": "http://172.20.162.198:17001/auction/customers/2125487952/watchlist?page=1&size=2"
                },
                "first": {
                  "href": "http://172.20.162.198:17001/auction/customers/2125487952/watchlist?page=0&size=2"
                },
                "prev": {
                  "href": "http://172.20.162.198:17001/auction/customers/2125487952/watchlist?page=0&size=2"
                },
                "next": {
                  "href": "http://172.20.162.198:17001/auction/customers/2125487952/watchlist?page=2&size=2"
                },
                "last": {
                  "href": "http://172.20.162.198:17001/auction/customers/2125487952/watchlist?page=49&size=2"
                }
              },
              "page": {
                "size": 2,
                "totalElements": 100,
                "totalPages": 50,
                "number": 1
              }
            }
            
+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

## Remove Watchlist product [/customers/{nationalId}/watchlist{?productId}]

### Remove product from watchlist [DELETE]

Used to remove an product from customer watchlist

---
**Error Code:**
- `INVALID_PRODUCT_ID` : product id is not valid 
- `INVALID_NATIONAL_ID` : customer id is null or invalid.
- `NOT_IN_WATCHLIST` : Product is not in watchlist.
---

+ Parameters

    + nationalId: `21254879985` (number, required) - national Id of a customer.
    + productId: `1001` (number, required) - Id of a product.
            
+ Response 201 (application/json)
+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

## Add Watchlist product [/customers/{nationalId}/watchlist]  

### Add product to Watchlist [POST]

Used to Add an item to watchlist

---
**Error Code:**

- `INVALID_PRODUCT_ID` : product id is invalid 
- `INVALID_NATIONAL_ID` : customer id is null or invalid
- `WATCHLIST_FULL`: max number of items in watchlist has been reached.
---
    
+ Parameters

    + nationalId: `21254879985` (number, required) - national Id of a customer.

+ Request   (application/json)

    + Attributes 
    
        + productId (number, required) - Id of a product.

    + Body
    
            {
               "productId" : 2544
            }
            
+ Response 204 (application/json)
+ Response 400 (application/json)
+ Response 500 (application/json)

## Customer Auction History Details [/customers/{nationalId}/auction-history/{historyType}{?page,size,order}]    

Used to get specific auction customer history.

### Get Customer Auction History Details [GET]    

---
**Error Code:**
 
- `INVALID_NATIONAL_ID` : customer id is null or invalid. 
---


+ Parameters
    + nationalId  (number, required) - customer national Id.
    + historyType  (number, required) - Possible Value for auction history type.
      + Members
            + `won`
            + `lost`
            + `ongoing`
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 10
    + order     (optional)
      + Default: `ASC`
      + Members
            + `ASC`
            + `DESC`
            
+ Request In case of historyType value equal won (application/json)
    + Parameters
        + nationalId: 1021458752
        + historyType: won
        + page: 0
        + size: 10
        + order: ASC
 
+ Response 200 (application/json)

    + Attributes 
        + id (number, required)   - id of a product
        + vatRate (number, required)   - rate of VAT percentage
        + msisdn (string , required) -  auction number
        + customerBid (number, required) - the last customer bid.
        + balanceDueBefore (string, required) - the due date to pay balance payment
        + currentPrice (number, required) - the total auction price.
        + category  - auction category
            + id  (number) - Id of a category.
            + name (string) - name of a category
        + balancePaymentStatus (enum[string])  - return weather of balance payment status is paid or not
            + Members
                + `PAID` 
                + `PENDING`
                + `UNPAID`
        + payments -
            + type (enum[string])  - payment type
                + Members
                    + `deposit` 
                    + `balance` 
                    + `purchase` 
            + method (enum[string]) - payment method
                + Members
                    + `creditCard`  
                    + `bankTransfer` 
            + amount (number) - payment amount
        + numberOfBids (number, required) - total number of bid
        + expiryDate (string, required) - tion expiry date
        
        
    + Body
    
            {
              "products": [
                {
                  "id":100,
                  "vatRate": 5,
                  "msisdn": "0566587458",
                  "customerBid": 6,
                  "balanceDueBefore": "2017-12-09T13:11:39",
                  "currentPrice": 8000,
                  "category": {
                    "Id": 27,
                    "name": "Bronze Numbers"
                  },
                  "balancePaymentStatus": "PAID",
                  "payments": [
                    {
                      "type": "deposit",
                      "method": "CC",
                      "amount": 300
                    },
                    {
                      "type": "balance",
                      "method": "CC",
                      "amount": 500
                    }
                  ]
                },
                {
                  "id":101,
                  "vatRate": 5,
                  "msisdn": "056659999",
                  "customerBid": 61,
                  "balanceDueBefore": "2017-12-09T13:11:39",
                  "currentPrice": 8000,
                  "category": {
                    "Id": 27,
                    "name": "Bronze Numbers"
                  },
                  "balancePaymentStatus": "UNPAID",
                  "payments": [
                    {
                      "type": "purchase",
                      "method": "CC",
                      "amount": 300
                    },
                    {
                      "type": "balance",
                      "method": "CC",
                      "amount": 500
                    }
                  ]
                }
              ],
              "links": {
                "self": {
                  "href": "http://172.20.162.198:17001/auction/customers/2154895231/auction-history/historyType=won&page=1&size=2"
                },
                "first": {
                  "href": "http://172.20.162.198:17001/auction/customers/2154895231/auction-history/historyType=won&page=0&size=2"
                },
                "prev": {
                  "href": "http://172.20.162.198:17001/auction/customers/2154895231/auction-history/historyType=won&page=0&size=2"
                },
                "next": {
                  "href": "http://172.20.162.198:17001/auction/customers/2154895231/auction-history/historyType=won&page=2&size=2"
                },
                "last": {
                  "href": "http://172.20.162.198:17001/auction/customers/2154895231/auction-history/historyType=won&page=49&size=2"
                }
              },
              "page": {
                "size": 2,
                "totalElements": 100,
                "totalPages": 50,
                "number": 1
              }
            }
            
+ Request In case of historyType value equal ongoing (application/json)
    + Parameters
        + nationalId: 1021458752
        + historyType: ongoing
        + page: 0
        + size: 10
        + order: ASC
 
+ Response 200 (application/json)

    + Attributes 
        + id (number, required)   - id of a product
        + msisdn (string , required) -  auction number.
        + numberOfBids (number, required) - total number of bid.
        + currentPrice (number, required) - the total auction price.
        + customerBid (number, required) - the last customer bid.
        + category  - auction category
            + id  (number) - Id of a category.
            + name (string) - name of a category
        + expiryDate (string, required) - auction expiry date.
            
    + Body
    
            {
              "products": [
                    {
                      "id":100,
                      "msisdn": "0566587458",
                      "customerBid": 6,
                      "numberOfBids": 15,
                      "expiryDate": "2017-12-09T13:11:39",
                      "currentPrice": 6930,
                      "category": {
                        "Id": 27,
                        "name": "Bronze Numbers"
                      }
                    } ,
                   {
                      "id":100,
                      "msisdn": "0566587458",
                      "customerBid": 6,
                      "numberOfBids": 15,
                      "expiryDate": "2017-12-09T13:11:39",
                      "currentPrice": 6930,
                      "category": {
                        "Id": 27,
                        "name": "Bronze Numbers"
                      }
                    }
                    
                  ],
              "links": {
                "self": {
                  "href": "http://172.20.162.198:17001/auction/customers/2154895231/auction-history/historyType=ongoing&page=1&size=2"
                },
                "first": {
                  "href": "http://172.20.162.198:17001/auction/customers/2154895231/auction-history/historyType=ongoing&page=0&size=2"
                },
                "prev": {
                  "href": "http://172.20.162.198:17001/auction/customers/2154895231/auction-history/historyType=ongoing&page=0&size=2"
                },
                "next": {
                  "href": "http://172.20.162.198:17001/auction/customers/2154895231/auction-history/historyType=ongoing&page=2&size=2"
                },
                "last": {
                  "href": "http://172.20.162.198:17001/auction/customers/2154895231/auction-history/historyType=ongoing&page=49&size=2"
                }
              },
              "page": {
                "size": 2,
                "totalElements": 100,
                "totalPages": 50,
                "number": 1
              }
            }
                        
+ Request In case of historyType value equal lost (application/json)
    + Parameters
        + nationalId: 1021458752
        + historyType: lost
        + page: 0
        + size: 10
        + order: ASC
 
+ Response 200 (application/json)

    + Attributes 
        + id (number, required)   - id of a product
        + msisdn (string , required) -  auction number.
        + numberOfBids (number, required) - total number of bid.
        + currentPrice (number, required) - the total auction price.
        + customerBid (number, required) - the last customer bid.
        + category  - auction category
            + id  (number) - Id of a category.
            + name (string) - name of a category
        + expiryDate (string, required) - auction expiry date.
            
    + Body
    
            {
              "products": [
                    {
                      "id":100,
                      "msisdn": "0566587458",
                      "customerBid": 6,
                      "numberOfBids": 15,
                      "expiryDate": "2017-12-09T13:11:39",
                      "currentPrice": 6930,
                      "category": {
                        "Id": 27,
                        "name": "Bronze Numbers"
                      }
                    } ,
                   {
                      "id":101,
                      "msisdn": "0566587458",
                      "customerBid": 6,
                      "numberOfBids": 15,
                      "expiryDate": "2017-12-09T13:11:39",
                      "currentPrice": 6930,
                      "category": {
                        "Id": 27,
                        "name": "Bronze Numbers"
                      }
                    }
                    
                  ],
              "links": {
                "self": {
                  "href": "http://172.20.162.198:17001/auction/customers/2154895231/auction-history/historyType=lost&page=1&size=2"
                },
                "first": {
                  "href": "http://172.20.162.198:17001/auction/customers/2154895231/auction-history/historyType=lost&page=0&size=2"
                },
                "prev": {
                  "href": "http://172.20.162.198:17001/auction/customers/2154895231/auction-history/historyType=lost&page=0&size=2"
                },
                "next": {
                  "href": "http://172.20.162.198:17001/auction/customers/2154895231/auction-history/historyType=lost&page=2&size=2"
                },
                "last": {
                  "href": "http://172.20.162.198:17001/auction/customers/2154895231/auction-history/historyType=lost&page=49&size=2"
                }
              },
              "page": {
                "size": 2,
                "totalElements": 100,
                "totalPages": 50,
                "number": 1
              }
            }
            
                      
            
+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

# Group Category

## Categories Collection [/categories]     

### List all Categories [GET]  

Used to return a list of all available categories in the auction system.

+ Request (application/json)

    + Headers

            Accept-Language: en
            Authorization: Basic [Encoded channel user credential]
            
+ Response 200 (application/json)

        {
            "categories": [
                {
                    "name": "Bronze Numbers",
                    "id": 32
                },
                {
                    "name": "Diamond Numbers",
                    "id": 30
                },
                {
                    "name": "Gold Numbers",
                    "id": 27
                },
                {
                    "name": "Momaiz Numbers",
                    "id": 31
                },
                {
                    "name": "Silver Numbers",
                    "id": 28
                }
            ]
        }
        
+ Response 500 (application/json)     

## Categories Detail [/categories/{id}]     

+ Parameters
    + id: `1` (number, required) - Id of a Category.
    
### Get Category [GET]  

Returns a single Category

---
**Error Code:**
- `CATEGORY_NOT_FOUND` : category id not found.
---

+ Request (application/json)

    + Headers

            Accept-Language: en
            
+ Response 200 (application/json)

            {
               "id":2,
               "name": "Diamond",
               "minimumIncrement": 200,
               "depositAmount":1000,
               "isAutoBidAllowed" : "true",
               "isPurchaseAllowed" : "true",
               "purchasePrice":100000,
               "numberOfBidToStartAutoBid" : 25,
               "purchaseDisablePercentege" : 80
            }

+ Response 404 (application/json)
 
+ Response 500 (application/json)

### Update Category [PUT]

+ Request (application/json)

    + Headers

            Accept-Language: en
            
    + Body
            
            {   
               "arabicName": "ماسي",
               "englishName": "Diamond",
               "minimumIncrement": 200,
               "depositAmount":1000,
               "isAutoBidAllowed" : "true",
               "isPurchaseAllowed" : "true",
               "purchasePrice":100000,
               "numberOfBidToStartAutoBid" : 25,
               "purchaseDisablePercentege" : 80
            }

+ Response 204 (application/json)

+ Response 500 (application/json)



# Group Product

## Widget Details [/widgets/{widgetName}{?page,size,order}]   

### Get Widgets Details [GET]

Used to return a specific auction widgets

+ Parameters
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 10
    + widgetName     (required) - Possible Value for product widget
      + Members
            + `highestBids`
            + `mostBids`
            + `mostViewed` 
    + order     (optional)
      + Default: `ASC`
      + Members
            + `ASC`
            + `DESC`
    
+ Response 200 (application/json)
    
     + Attributes  
        + id (number) - Id of a product.
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + productStatus (enum[string]) - return list of product status
            + Members
                + `sold` 
                + `new`
        + category  - 
            + id  (number) - Id of a product.
            + name (string) - name of a category
 
 + Body
    
            {
              "products": [
                {
                  "id": 1001,
                  "msisdn": "533996655",
                  "currentPrice": 8000,
                  "productStatus": "sold",
                  "category": {
                    "Id": 27,
                    "name": "Bronze Numbers"
                  }
                },
                {
                  "id": 1002,
                  "msisdn": "5399999999",
                  "currentPrice": 8000,
                  "productStatus": "new",
                  "category": {
                    "Id": 27,
                    "name": "Bronze Numbers"
                  }
                }
              ],
              "links": {
                "self": {
                  "href": "http://172.20.162.198:17001/auction/widgets?widgetName=highestBids&page=1&size=2"
                },
                "first": {
                  "href": "http://172.20.162.198:17001/auction/widgets?widgetName=highestBids&page=0&size=2"
                },
                "prev": {
                  "href": "http://172.20.162.198:17001/auction/widgets?widgetName=highestBids&page=0&size=2"
                },
                "next": {
                  "href": "http://172.20.162.198:17001/auction/widgets?widgetName=highestBids&page=2&size=2"
                },
                "last": {
                  "href": "http://172.20.162.198:17001/auction/widgets?widgetName=highestBids&page=49&size=2"
                }
              },
              "page": {
                "size": 2,
                "totalElements": 100,
                "totalPages": 50,
                "number": 1
              }
            }
            
            
+ Response 400 (application/json)
+ Response 500 (application/json)

## Products  [/products{?page,size,sort,order}]

### Add Products [POST]

Add a list of auctions

---
**Error Code:**
- `OVERLAP_NOT_ALLOWED` : Auction Batches overlap is not allowed.
---
+ Request (application/json)
    + Body
            
            {
              "startDate": "2017-11-19T12:4:00",
              "auctionNumbers": [
                {
                  "categoryId": 31,
                  "msisdn": "500008802"
                },
                {
                  "categoryId": 29,
                  "msisdn": "500009020"
                },
                {
                  "categoryId": 26,
                  "msisdn": "505555007"
                }
              ],
              "endDate": "2017-11-29T12:2:59",
              "batchId": "AUC1000057"
            }
            
+ Response 204


+ Response 500 (application/json)

## Products Collection [/categories/{id}/product{?page,size,sort,order}]

### List All Products by category [GET]

Return a list of all products in a specific category

---
**Error Code:**
- `CATEGORY_NOT_FOUND` : category not found
- `TYPE_MISMATCH` : Type does not match on parameter parameter_name expected value of type parameter_type.
---
+ Parameters
    
    + id (number) - category id
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 100
    + sort     (optional)
      + Default: `id`
      + Members
            + `price`
            + `numberOfBids`
            + `views` 
            + `id`
    + order     (optional)
      + Default: `ASC`
      + Members
            + `ASC`
            + `DESC`
    
+ Response 200 (application/json)

     + Attributes  
        + id (number) - Id of a product.
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + productStatus (enum[string]) - return list of product status
            + Members
                + `sold` 
                + `new`
        + category  - 
            + id  (number) - Id of a category.
            + name (string) - name of a category
            
    + Body            
        
            {
              "products": [
                {
                  "id": 1001,
                  "msisdn": "533996655",
                  "currentPrice": 8000,
                  "productStatus": "sold",
                  "category": { "Id": 27 , "name" : "Bronze Numbers" }
                },
                {
                  "id": 1002,
                  "msisdn": "5399999999",
                  "currentPrice": 8000,
                  "productStatus": "new",
                  "category": { "Id": 27 , "name" : "Bronze Numbers" }
                }
              ],
              "links": {
                "self": {
                  "href": "http://172.20.162.198:17001/auction/categories/27/products?page=1&size=2"
                },
                "first": {
                  "href": "http://172.20.162.198:17001/auction/categories/27/products?page=0&size=2"
                },
                "prev": {
                  "href": "http://172.20.162.198:17001/auction/categories/27/products?page=0&size=2"
                },
                "next": {
                  "href": "http://172.20.162.198:17001/auction/categories/27/products?page=2&size=2"
                },
                "last": {
                  "href": "http://172.20.162.198:17001/auction/categories/27/products?page=49&size=2"
                }
              },
              "page": {
                "size": 2,
                "totalElements": 100,
                "totalPages": 50,
                "number": 1
              }
            }
 
+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

## Products Detail [/products/{id}{?nationalId}]     

### Get Product Detail [GET]

Return a single product detail resource. 

+ Parameters

    + id: `1001` (number, required) - Id of a product.
    + nationalId: `2154879542` (string, optional) - send nationalId if you looking for customer bid status. 

+ Request In case of request sent with nationalId (application/json)
                              
+ Response 200 (application/json)

    + Attributes  
        + id (string) - Id of a product.
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + expiryDate  (string) - auction expiry date, timestamp format yyyy-MM-dd'T'HH:mm:ss
        + numberOfBids (number) - totale number of bids.
        + isAutoBidAllowed  (boolean) - return if auto bid featuer allowed
        + hasDeposit  (boolean) - return if the customer has deposit or not
        + isProductInWatchlist (boolean) - used to know the product in watchlist or not.
        + depositAmount - product deposit amount.
        + minimumIncrement (string)  - product minimum Increment
        + productStatus (enum[string]) - return list of product status
            + Members
                + `sold` 
                + `new`
        + customerBidStatus (enum[string]) -  return list of bid status belongs to a specific customer, return none if no customer sent in the request 
            + Members
                + `noBid`
                + `highestBidder`
                + `outbid` 
        + purchase  - 
            + isPurchaseAllowed  (boolean) - return if  product purchase featuer is allowed  
            + purchasePrice (number)- fixed product price. 
            + depositAmount (number) - product deposit amount.
        + category  - auction category
            + id  (number) - Id of a category.
            + name (string) - name of a category
            
      
    + Body
    
            {
              "id": 1001,
              "msisdn": "533996655",
              "currentPrice": 8000,
              "expiryDate": "2017-05-24T14:25:10",
              "numberOfBids": 15,
              "isAutoBidAllowed": false,
              "productStatus": "sold",
              "customerBidStatus": "noBid",
              "hasDeposit" : true,
              "isProductInWatchlist" : true,
              "depositAmount": 300,
              "minimumIncrement": 200,
              "purchase": {
                "isPurchaseAllowed":true,
                "price": 800000,
                "depositAmount": 20000
              }
              "category": {
                "Id": 27,
                "name": "Bronze Numbers"
              }
            }

+ Request In case of request sent without nationalId (application/json)
                              
+ Response 200 (application/json)

    + Attributes  
        + id (string) - Id of a product.
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + expiryDate  (string) - auction expiry date, timestamp format yyyy-MM-dd'T'HH:mm:ss
        + numberOfBids (number) - totale number of bids.
        + isAutoBidAllowed  (boolean) - return if auto bid featuer allowed
        + minimumIncrement (string)  - product minimum Increment.
        + depositAmount - product deposit amount.
        + productStatus (enum[string]) - return list of product status
            + Members
                + `sold` 
                + `new`
        + purchase  - 
            + isPurchaseAllowed  (boolean) - return if  product purchase featuer is allowed  
            + purchasePrice (number)- fixed product price. 
            + depositAmount (number) - product deposit amount.
        + category  - auction category
            + id  (number) - Id of a category.
            + name (string) - name of a category
            
      
    + Body
    
            {
              "id": 1001,
              "msisdn": "533996655",
              "currentPrice": 8000,
              "expiryDate": "2017-05-24T14:25:10",
              "numberOfBids": 15,
              "isAutoBidAllowed": false,
              "productStatus": "sold",
              "depositAmount": 300,
              "minimumIncrement": 200,
              "purchase": {
                "isPurchaseAllowed":true,
                "price": 800000,
                "depositAmount": 20000
              }
              "category": {
                "Id": 27,
                "name": "Bronze Numbers"
              }
            }
            
+ Response 404 (application/json)
+ Response 400 (application/json)
+ Response 500 (application/json)

## Search Products [/products/search{?page,size,msisdn}]

### Search [GET]

Return a list of all matched msisdn

+ Parameters
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 10
    + msisdn    (number) - complate or a part of auction number
    
+ Response 200 (application/json)

    + Attributes  
        
        + id (string) - product id.
        + msisdn (string) - The auction number.
        + categoryId (string) - category id.

    + Body  
    
            {
                  "products": [
                    {
                      "msisdn": "500000004",
                      "category": {
                        "name": "أرقام الفئة الذهبية",
                        "id": 27
                      },
                      "id": 36
                    },
                    {
                      "msisdn": "500000005",
                      "category": {
                        "name": "أرقام الفئة الذهبية",
                        "id": 27
                      },
                      "id": 37
                    }
                  ],
                  "links": {
                    "self": {
                      "href": "http://172.20.162.198:17001/auction/search?msisdn=0555&page=1&size=2"
                    },
                    "first": {
                      "href": "http://172.20.162.198:17001/auction/search?msisdn=0555&page=0&size=2"
                    },
                    "prev": {
                      "href": "http://172.20.162.198:17001/auction/search?msisdn=0555&page=0&size=2"
                    },
                    "next": {
                      "href": "http://172.20.162.198:17001/auction/search?msisdn=0555&page=2&size=2"
                    },
                    "last": {
                      "href": "http://172.20.162.198:17001/auction/search?msisdn=0555&page=49&size=2"
                    }
                  },
                  "page": {
                    "size": 2,
                    "totalElements": 100,
                    "totalPages": 50,
                    "number": 1
                  }
            }
            
# Group Batch

## Batches Collection [/batches{?startDate,endDate}]

### List all Expired Batches  [GET]

Return list of all expired batches

---
**Error Code:**
- `INVALID_DATE_RANGE` : End date must me greater than start date.
     
---
+ Parameters
    + startDate  (date) - timestamp format yyyy-MM-dd'T'HH:mm:ss
    + endDate    (date) - timestamp format yyyy-MM-dd'T'HH:mm:ss

    
+ Request (application/json)

    + Headers

            Accept-Language: en
            
+ Response 200 (application/json)

        {
          "batches": [
            {
              "id": "AUC0003",
              "endDate": "2017-05-24T14:25:10",
              "startDate": "2017-05-24T14:25:10"
            },
            {
              "id": "AUC0004",
              "endDate": "2016-05-24T14:25:10",
              "startDate": "2017-05-24T14:25:10"
            }
          ]
        }

+ Response 400 (application/json)

+ Response 500 (application/json)


# Group Payment 

## Payment Method List [/payments/paymentMethod{?paymentType,productId}]

### Get Payment Method List[GET]

Used to get all available payment method for specific productId and payment type.

---
**Error Code:**
- `PRODUCT_NOT_FOUND` : product id is not found. 
- `PRODUCT_IS_EXPIRED` - product has expired. The product related to this request has expired.
- `AUCTION_IS_NOT_ACTIVE` : Auction time is finished or not started yet.
       
---

+ Parameters
    + paymentType    (enum[string]) 
        + Members
            + `balance`
            + `purchase`
    + productId: `27` (number, required) - product Id.
    
+ Request (application/json)
 
+ Response 200 (application/json)

    + Attributes 
        + paymentMethods (enum[string])  - the list of available payment method to be used to pay balance payment
            + Members
                + `creditCard`  
                + `bankTransfer` 
                
    + Body
    
            {
              "paymentMethods": [
                "creditCard",
                "bankTransfer"
              ]
            }
     
+ Response 400 (application/json)
+ Response 500 (application/json)

## Add Payments [/payments/{paymentMethod}]

### Place Payment [POST]

Used to add payment to auction. 

---
**Error Code:**

<table>
    <tr>
          <td></td>
          <td>Bank Transfer</td>   
          <td>Credit Card</td>  
    </tr>
    <tr>
        <td>Technical Error </td>              
        <td> <ul style="list-style-type:number">
              <li>UNKNOWN_ERROR</li>
            </ul> </td> 
         <td> <ul style="list-style-type:number">
              <li>UNKNOWN_ERROR</li>
            </ul> </td>  
    </tr>
    <tr>
        <td>Functional Error</td>              
              <td> <ul style="list-style-type:number">
              <li>INVALID_NATIONAL_ID</li>
              <li>INVALID_CUSTOMER_TYPE</li>
              <li>INVALID_PRODUCT_ID</li>
              <li>AGREED_TERMS_MUST_ACCEPTED</li>
              <li>AMOUNT_MISMATCH</li>
              <li>VALIDATION_ERROR</li>
              <li>DEPOSIT_NOT_PAID</li>
              <li>BALANCE_ALREADY_PAID</li>
              <li>PAYMENT_NOT_ALLOWED</li>
              <li>TYPE_MISMATCH</li>
              <li>MAX_NUMBER_OF_ATTEMPTS_EXCEEDED</li>
              <li>PENDING_BANK_TRANSFER_PAYMENT_EXIST</li>
              <li>QUERY_PARAMETER_NOT_PRESENT</li>
              <li>QUERY_PARAMETER_IS_NULL</li>
            </ul> </td> 
         <td> <ul style="list-style-type:number">
              <li>INVALID_NATIONAL_ID</li>
              <li>INVALID_CUSTOMER_TYPE</li>
              <li>INVALID_PRODUCT_ID</li>
              <li>AGREED_TERMS_MUST_ACCEPTED</li>
              <li>AMOUNT_MISMATCH</li>
              <li>VALIDATION_ERROR</li>
              <li>DEPOSIT_NOT_PAID</li>
              <li>BALANCE_ALREADY_PAID</li>
              <li>PAYMENT_NOT_ALLOWED</li>
              <li>TYPE_MISMATCH</li>
              <li>PRODUCT_IS_EXPIRED</li>  
              <li>FEATURE_UNSUPPORTED_FOR_PRODUCT</li>
              <li>PENDING_PURCHASE_PAYMENT_EXIST</li>
              <li>BIDDING_AMOUNT_EXCEEDED_FIXED_PRICE</li>
              <li>QUERY_PARAMETER_NOT_PRESENT</li>
              <li>QUERY_PARAMETER_IS_NULL</li>
            </ul> </td>  
    </tr>
</table>


- `INVALID_NATIONAL_ID` - customer id is null or invalid.
- `INVALID_PRODUCT_ID` - product id is invalid.
- `INVALID_CUSTOMER_TYPE` - customer type is invalid.
- `AGREED_TERMS_MUST_ACCEPTED` - agreed of terms and condition cannot be null, or not accepted.
- `PRODUCT_IS_EXPIRED` - product has expired. The product related to this request has expired.
- `DEPOSIT_NOT_PAID` - the deposit amount must be paid before attempt balance payment. 
- `DEPOSIT_ALREADY_PAID` - the customer already paid deposit payment for this product.
- `BALANCE_ALREADY_PAID` - the customer already paid blance payment for this product.
- `PAYMENT_NOT_ALLOWED` - The payment related to this request not allowed
- `FEATURE_UNSUPPORTED_FOR_PRODUCT` - The feature is disabled or unsupported.
- `BIDDING_AMOUNT_EXCEEDED_FIXED_PRICE` - the bidding amount exceeded 80% of the product fixed price.
- `PENDING_PURCHASE_PAYMENT_EXIST` - the product reserved from another buyer,
- `MAX_NUMBER_OF_ATTEMPTS_EXCEEDED` - You have exceeded the maximum number of bank transfer attempts, this error code is designed for bank transfer only
- `PENDING_BANK_TRANSFER_PAYMENT_EXIST` - already pending bank payment exist
- `UNKNOWN_ERROR` : an internal server error has occurred. Resend the request at another time.If this error persists, contact Auction Team Support.
- `TYPE_MISMATCH` : Type does not match on parameter 'parameter name' expected value of type 'parameter type', possible values: [value 1, value 2, ..etc]
- `QUERY_PARAMETER_NOT_PRESENT` : Required parameter of name 'parameter name' with type "parameter type".
- `QUERY_PARAMETER_IS_NULL` :  Required parameter value cannot be null.

---

+ Parameters
    + paymentMethod       (enum[string], required) 
        + Members
            + `creditCard`  
            + `bankTransfer` 
            
+ Attributes 
    + productId         (number, required)
    + nationalId        (number, required)
    + agreedTerms       (boolean, required)
    + customerType      (string, required)
    + transaction
        + id  (string, required) - payment transaction id
        + amount (number, required) - payment transaction amount 
        + confirmationNumber (string, required) - STC confirmation number,  not required for bank Transfer payment method
        + date (string, required) - payment transaction date, timestamp format yyyy-MM-dd'T'HH:mm:ss 
        + type (enum[string], required) - transaction type
            + Members
                + `deposit`
                + `balance`
                + `purchase`
        + intent           (enum[string], required) 
            + Members
                + `sale`  - Makes an immediate payment
                + `authorize`- Authorizes a payment for capture later.
    + bankTranfer - required for bank Transfer payment method
        + bankId (number, required) -  bank id.
        + firstName (number, required) - transformer first name
        + lastName (number, required) -  transformer last name
    

+ Request In case of paymentMethod value equal creditCard (application/json)

    + Body
    
            {
              "productId": 1001,
              "nationalId": "2154879562",
              "agreedTerms": true,
              "customerType" : "s",
              "transaction": {
                "id": "09b8acf0",
                "amount": 1300,
                "date": "2017-04-25T15:05:33",
                "confirmationNumber": "STC-304399382",
                "type": "deposit",
                "intent": "sale"
              }
            }
        
+ Request In case of paymentMethod value equal bankTransfer (application/json)

    + Body
    
            {
              "productId": 1001,
              "nationalId": "2154879562",
              "agreedTerms": true,
              "customerType" : "s",
              "transaction": {
                "id": "09b8acf0",
                "amount": 1300,
                "date": "2017-04-25T15:05:33",
                "type": "deposit",
                "intent": "sale"
              } , 
              "bankTranfer" {
               "bankId" : 12,
               "firstName" : "first-name", 
               "lastName" : "last-name",
              }
            }
       
+ Response 201 (application/json)
+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)



## Payments Reconcile Collection [/payments/reconcile{?batchId,transactionType}]

### List all Payments Reconcile Transaction [GET]

Return a list of all payment reconcile transaction for specific batch and transaction type

---
**Error Code:**
- `INVALID_BATCH_ID` : Batch Id is null or invalid.
- `INVALID_TRANSACTION_TYPE` : TransactionType value is invalid.
---
+ Parameters
    + batchId            (String, required)
    + transactionType    (enum[string]) 
        + Members
            + `capture` 
            + `reversal`
            
+ Response 200 (application/json)

        {
          "totalAmount": 999216,
          "totalTransactions": 424,
          "transactions": [
            {
              "id": "09b8acf0-9f08-43f3-9e54-ba6b6088b2cf",
              "amount": 1300,
              "date": "2017-04-25T15:05:33",
              "confirmationNumber": "STC-304399382"
            },
            {
              "id": "8095f868-9b2c-4100-b4b3-0b759e581506",
              "amount": 500,
              "date": "2017-04-25T07:08:36",
              "confirmationNumber": "STC-304393705"
            }
          ]
        }

+ Response 400 (application/json)

+ Response 500 (application/json)

##  Reversal Deposit [/payments/deposit-reversal]
    
### Reversal Deposit  [POST]
Used to released a deposit amount for a specific product.
the response back used to refersh value of transfer deposit and cancel deposit

---
**Error Code:**
 
- `DEPOSIT_NOT_FOUND` : no deposit found for this product.
- `PRODUCT_IS_EXPIRED` : product is expired
- `NOT_ALLOWED_FOR_HIGHEST_BIDDER` : highest bidders cannot reversed their deposit
- `REVERSED_NOT_ALLOWED` : reversal not allowed for purchase deposit.
- `INVALID_NATIONAL` : customer id is null or invalid
- `INVALID_PRODUCT_ID` : product id is not valid 
---
 
     
    
+ Request (application/json)
    
    + Attributes 
        + productId        (number, required)  
        + nationalId       (number, required) 
        
    + Body

            {
                "productId": 15,
                "nationalId": 2125487952
            }
            
+ Response 201 (application/json)

    + Attributes 
        + hasDeposit  (boolean) - return if the customer has deposit or not
    
    + Body

            {
                "hasDeposit": false
            }

+ Response 400 (application/json)
 
+ Response 500 (application/json)

# Group Bid 
           
## Bids Collection [/bids]

### Place Bid [POST]

used to place a new bid for a specific product to a customer.
Note That :  in not allowed to send both value for  `regularBidAmount` , `autoBidAmount`, it should one of them.

---
**Error Code:**
- `DEPOSIT_NOT_PAID` : customer didn't pay deposit payment.
- `CUSTOMER_IS_BLACKLISTED` : customer is blacklisted in auction.
- `AUCTION_IS_NOT_ACTIVE` : Auction time is finished or not started yet.
- `BID_IS_LESS_THAN_MINIMUM_INCREMENT` : Bid is less than minimum bid.
- `INVALID_NATIONAL_ID` : customer id is invalid.
- `INVALID_CUSTOMER_TYPE` : customer type  is invalid.
- `WRONG_BID_TYPE` : bid type in request does not match auction bid type. (auto bid / regular bid) 
- `BID_NOT_ALLOWED` : not allowed to bid in both type.

---  
+ Request (application/json)


    + Headers

            Accept-Language: en
            
    + Body
            
            {
                "nationalId": 10999999,
                "customerType" : "s",
                "regularBidAmount": 5000,
                "autoBidAmount" : null,
                "productId": 1
            }

+ Response 201 (application/json)

    + Attributes 
    
        + numberOfBids (number) - totale number of bids.
        + isAutoBidAllowed  (boolean) - return weather of auto bid featuer enabled or disable
        + currentPrice (string) - return latest bid amount.
        + customerBidStatus (enum[string]) -  return list of bid status belongs to a specific customer, return none if no customer sent in the request 
            + Members
                + `highestBidder`
                + `outbid` 
        + purchase  - purchase information
            + isPurchaseAllowed  (boolean) - return if  product purchase featuer is allowed  
            + purchasePrice (number)- fixed product price. 
            + depositAmount (number) - product deposit amount.

    + Body
    
            {
              "numberOfBids": 37,
              "currentPrice": 5000,
              "customerBidStatus": "highestBidder",
              "isAutoBidAllowed": true,
              "purchase": {
                "isPurchaseAllowed": true,
                "price": 800000,
                "depositAmount": 2000
              }
            }

+ Response 400 (application/json)