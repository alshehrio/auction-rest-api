FORMAT: 1A
HOST: http://172.20.162.198:17001/auction


# Auction 2 REST API v1.1

The Auction API provides a list of API for developers to interact with the Auction system.

## Changelog  
* Feb 22th, 2018
* Mar 8th, 2018

## Definitions
### Payment 
* <b>Deposit :</b> The amount is authorized using e-Payments system, and not captured unless the user wins the auction
* <b>Balance :</b> The deposit payment for the winning bidder is captured during the end-of-auction process.  There is no required intervention by the user.
* <b>Reverse authorization :</b> The end-of-auction process reverses all deposits held on behalf of non-winning bidders or the Non-winning user decides to withdraw from the auction
* <b>Transfer deposit payment :</b> the customer can transfer their deposit from the first auction to the new auction
* <b>Reversal deposit :</b> If a user no longer wishes to participate in an auction they may request reversal of their authorization. (withdraw from the auction)

### Auction Feature 
* <b>Blacklisted :</b> when the customer wim an Auction number and he did not buy the remaining amount within the payment window he will be blacklisted in the Auction system. 
* <b>Purchase auction :</b> it is a feature to let the user buy the Auction number immediately.  
* <b>Auto bidding :</b> When you place your bid on an auction item, you will be prompted to enter Automatic (or Auto) bid, which is the maximum you are prepared to pay for the item
* <b>Regular bidding :</b> which is the normal bid for auction .  
* <b>Rolling expiry (extend) :</b> The Auction should start a 10 days countdown for each number in the Auction with the first bid on it. 

## HLD
### Frist Section 
###### To determine the various channels and their interactions with the auction system , there are three main elements:
* <b>Front-end Channels:</b> Responsible for the presentation of data, receiving user elements and controlling the user interface. 
* <b>OCP system:</b> Responsible for securing the auction system, expose auction web services to front-end channels, audit service request/response and provide some services to the front-end channels.
* <b>Auction system:</b> Responsible for providing all auction business services of the system, and to store data in a database.
* <b>igate system:</b> Responsible for Adding Auction batch to Auution System through OCP system .
* <b>ePayment system:</b> Responsible for (Authorize/capture) payment. 
* <b>notification center system:</b> Responsible for sending notifications to the customer .

![name](http://i66.tinypic.com/orj7gw.png)

### Second Section
###### Moving scheduled tasks from OCP layer to be under the auction system, as shown in the diagram below. 
* <b>Add Auction products:</b>
* <b>SIM registreation reconselation:</b>
* <b>End of Auction:</b>
* <b>Update Auction number status:</b>
* <b>Custoumer Blacklist:</b>
![name](http://i63.tinypic.com/2djoxn4.jpg)

## Requirements
here is the [Auction requirements](https://drive.google.com/file/d/1WKcHtQlVTMX5W1u7uL6AHgZZAtcRLx4a/view?usp=sharing)

## Sequence Diagrams

<b>Note</b>: you can drag and drop the sequence diagrams to browser tab to zoom in.

### Digram 1 :  Adding prodcuts to Auction system 
<b>Auction API :</b> 
* (Add Products)
![name](http://i67.tinypic.com/20h7aec.png)

### Digram 2.1 : Customer viewing Auction Categories 
<b>Auction API :</b>
* (Customer Eligibility)
* (List all Categories) 
![name](http://i63.tinypic.com/29c5k6t.png)

### Digram 2.2 : Customer viewing Auction numbers 
<b>Auction API :</b>
* (List all Products By Category) 
* (Get Products Detail) 
![name](http://i64.tinypic.com/33c0v4j.png)

### Digram 2.3 : Customer Notification 
<b>Auction API :</b>
* (Get Customer Notification) 
![name](http://i65.tinypic.com/nd2zhy.png)

### Digram 3.1 :  Add product to Watchlist
<b>Auction API :</b>
* (Add product to Watchlist)
![name](http://i67.tinypic.com/14cxk4i.png)

### Digram 3.2 :  Remove product from watchlist
<b>Auction API :</b>
* (Remove product from watchlist) 
![name](http://i65.tinypic.com/2n6awli.png)

### Digram 3.3 :  List all watchlist products
<b>Auction API :</b>
* (List all watchlist products) 
![name](http://i67.tinypic.com/a1o3ty.png)

### Digram 4.1 :  bidding Deposit
<b>Auction API :</b>
* (Place Bid) 
* (Place Payment) 
![name](http://i67.tinypic.com/2a9z4ub.png)

### Digram 4.2 :  Purchase Deposit 
<b>Auction API :</b>
* (Place Bid) 
* (Place Payment) 
![name](http://i67.tinypic.com/2cf7bs2.png)

### Digram 5.1 :  Reversal Deposit 
<b>Auction API :</b>
* (Reversal Deposit)
![name](http://i63.tinypic.com/2njhngl.png)

### Digram 5.2 :  Transfer Deposit 
<b>Auction API :</b>
* (Get Customer Deposit) 
* (Transfer Deposit) 
![name](http://i64.tinypic.com/2eld0k5.png)

### Digram 6 :  Widgets 
<b>Auction API :</b>
* (Get Widgets Details ) 
![name](http://i65.tinypic.com/xqlw09.png)

### Digram 7 : find an Auction number 
<b>Auction API :</b> 
(Search) 
![name](http://i66.tinypic.com/2196q9l.png)

### Digram 8 :  Auction History Details 
<b>Auction API :</b>
* (Get Customer Auction History Details) 
![name](http://i64.tinypic.com/e9xjsw.png)

### Digram 9.1 : Winner Customer pay the balance amount with creditCard (unpaid)
<b>Auction API :</b>
* (Get Customer Auction History Details) 
* (Get Payment Method List)
* (Place Payment) 
![name](http://i65.tinypic.com/19w2n9.png)

### Digram 10.1 : Winner Customer pay the balance amount with bankTransfer (unpaid)
<b>Auction API :</b>
* (Get Customer Auction History Details) 
* (Get Payment Method List)
* (Place Payment) 
![name](http://i64.tinypic.com/2r4hkwn.png)

### Digram 10.2 : Winner Customer pay the balance amount with bankTransfer (pending)
<b>Auction API :</b>
* (Get Customer Auction History Details) 
![name](http://i68.tinypic.com/70uvc6.png)

### Digram 10.3 : back office 
<b>Auction API :</b>
![name](http://i63.tinypic.com/osucjq.png)

### Digram 10.4 : Winner Customer pay the balance amount with bankTransfer (rejected)
<b>Auction API :</b>
* (Get Customer Auction History Details) 
* (Place Payment) 
![name](http://i64.tinypic.com/10qcvom.png)

### Digram 11.1 : Winner Customer with balance amount (paid)
<b>Auction API :</b>
* (Get Customer Auction History Details) 
![name](http://i66.tinypic.com/vxnlaw.png)

### Digram 11.2 : Winner Customer with balance amount (expired)
<b>Auction API :</b>
* (Get Customer Auction History Details) 
![name](http://i63.tinypic.com/2cf3wvo.png)

## Consideration
* Any new channel should be configured in the auction system. otherwise, all requests from this channel will be rejected. 
* the base URL for all request is : 
* Test environment: https://xxx.xx.xxx.xxx:xxxxx/auction
* Prod environment: https://xxx.xx.xxx.xxx:xxxxx/auction

## HTTP Request Headers
###### The following is a mandatory header tags, that must be sent with each request: 
  * `content-type` - The format of the request body - only `application/json` is supported at this time. 
  * `accept-language` - The language that you want the descriptions returned in - example `en`,`ar`. 
  * `date` - the date and time at which the message was originated - example`dd-mm-yyyy hh:mm:ss`
  * `channel-name` - The channel name - example `MYSTC-PORTAL`,`MYSTC-IPHONE`,`MYSTC-ANDROID`.
  * `client-ip`  - The ip4 address of client - example `xxx.xxx.xxx.xxx`
  * `user-agent` - The app version of the mobile application that tries to consume the API - example `v3.8.1`.
  * `api-version` - The API version of auction application - example `v1`.
  * `Authorization` - HTTP basic authentication. We use a HTTP header where we add 
                     'username:password' encoded in base64, you have to add '<B>Basic</B>' as a static prefix with each encoded credential.
                      <P><B> Example : </B></P> - `authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=` 
                      
  
## HTTP Response Codes
  * `200` - The request completed OK
  * `201` - The specified object was created successfully
  * `202` - The request has been accepted for processing, but the processing has not been completed. 
  * `204` - The request completed OK (No Content)
  * `400` - The request was not understood
  * `401` - authentication failed or the user doesn't have permissions for the requested operation.
  * `403` - You do not have access to the requested object
  * `404` - The object that was requested doesn't exist
  * `405` - The resource exists, but the wrong method was used. 
  * `500` - There was an internal API error
  * `501` - You have used a method (`GET`/`PUT`/`POST`/`PATCH`/`DELETE`) not supported by this endpoint
  
## HTTP Response Header
  * `content-type` - The format of the response body - only `application/json` is supported at this time.
  * `cache-control` - used to specify directives for caching mechanisms in both requests and responses. example :( )
  * `content-language` - describe the language(s) intended for the audience. example `en`,`ar`. 
  * `date` - the date and time at which the message was originated. example `dd-mm-yyyy hh:mm:ss`.
  
## General Errors
In the responses to failed requests, Auction returns HTTP `4XX` or `5XX` status codes.

In addition, the Auction API can return the following errors.

- `UNKNOWN_ERROR` : an internal server error has occurred. Resend the request at another time.If this error persists, contact Auction Team Support.
- `TYPE_MISMATCH` : Type does not match on parameter 'parameter name' expected value of type 'parameter type', possible values: [value 1, value 2, ..etc]
- `QUERY_PARAMETER_NOT_PRESENT` : Required parameter of name 'parameter name' with type "parameter type".
- `QUERY_PARAMETER_IS_NULL` :  Required parameter value cannot be null.

For all errors except validation errors, auction returns an error response body in the following format:

     
```
{
    "errorCode": "ERROR_NAME",
    "message"  : "ERROR_MESSAGE"
}
```


##  Validation Errors
For validation errors `VALIDATION_ERROR`, Auction returns the HTTP `400 Bad Request` status code.

The server could not understand the request. Indicates one of these conditions:

* The API cannot convert the payload data to the underlying data type.
* The data is not in the expected data format.
* A required field is not available.
* A simple data validation error occurred.


The response body for validation errors includes additional error details in the following format:

```
{
  "errorCode": "VALIDATION_ERROR",
  "fieldErrors": [
    {
      "field": "email",
      "message": "must not be null"
    }
  ]
}

```

## API Catalog
list of all APIs and their respective owners

<table>
    <tr>
        <td><b> Consumer Name</b></td>
        <td><b> API Name </b></td>
        <td><b> Version Number </b></td>
        <td><b> Change Date </b></td>
    </tr>
    <tr>
        <td> OCP APIs</td>
        <td> <ul style="list-style-type:number">
              <li>Add Products</li>
              <li>Customer Notification</li>
              <li>Customer Eligibility</li>
              <li>List all Categories</li>
              <li>List all Products By Category</li>
              <li>Get Products Detail</li>
              <li>Add product to Watchlist</li>
              <li>Remove product from watchlist</li>
              <li>List all watchlist products</li>
              <li> Place Bank Transfer Payment</li>
              <li>Get Payment Method List</li>
              <li>Place Payment</li>
              <li>Reversal Deposit</li>
              <li>Get Customer Deposit</li>
              <li>Transfer Deposit</li>
              <li>Get Widgets Details</li>
              <li>Get Customer Auction History Details</li>
              <li>Search</li>
            </ul> </td> 
        <td>1.1 </td>
        <td>07/July/2018 </td> 
    </tr>
    <tr>
        <td> Auction Admin API's</td>              
        <td> <ul style="list-style-type:number">
              <li>Get User</li>
              <li>Add User</li>
              <li>Update User</li>
              <li>List All Group</li>
              <li>Get Category</li>
              <li>Update Category</li>
            </ul> </td>
        <td>1.0 </td>
        <td>22/Feb/2018 </td> 
    </tr>
    <tr>
        <td>Payment API's</td>              
        <td> <ul style="list-style-type:number">
              <li>Place Credit Card Paymentt</li>
              <li>Batches Batches Collection </li>
              <li>Payments Reconcile Collection</li>
            </ul> </td>
        <td>1.1 </td>
        <td>07/July/2018 </td> 
    </tr>
</table>


# Group User

## User Collection [/users]

### Get User [GET]

Get All Users

+ Response 200 (application/json)

        {
          "users": [
            {
              "username": "ocp",
              "groups": [
                {
                  "id": 1,
                  "name": "auction",
                  "authorities": [
                    {
                      "id": 1,
                      "name": "ADMIN"
                    }
                  ]
                }
              ],
              "enabled": false
            },
            {
              "username": "payment",
              "groups": [
                {
                  "id": 46,
                  "name": "TEST_GROUP",
                  "authorities": [
                    {
                      "id": 1,
                      "name": "ADMIN"
                    }
                  ]
                }
              ],
              "enabled": false
            }
          ]
        }

### Add User [POST]
Add User

---
**Error Code:**
- `USER_ALREADY_EXIST`
- `GROUP_NOT_FOUND`

---
    
+ Request (application/json)
    
    + Body

            {
              "username": "test1234",
              "password": "Aa123456",
              "enabled": false,
              "groups": [
                {
                  "id": 1
                }
              ]
            }
            
+ Response 201 (application/json)

        {
            "username": "test1234",
            "groups": [
                {
                    "id": 1,
                    "name": "auction",
                    "authorities": [
                        {
                            "id": 1,
                            "name": "ADMIN"
                        }
                    ]
                }
            ],
            "enabled": false
        }


+ Response 400 (application/json)


     
## Users Detail [/users/{username}]
+ Parameters
    + username: `test` (string, required) - username.

### Update User [PATCH]

Update user active status

---
**Error Code:**
- `GROUP_NOT_FOUND`
---
+ Request (application/json)

        {
          "enabled": false,
          "groups": [
            {
              "id": 1
            }
          ]
        }
            
+ Response 200 (application/json)

            {
                "username": "test",
                "groups": [
                    {
                        "id": 1,
                        "name": "auction",
                        "authorities": [
                            {
                                "id": 1,
                                "name": "ADMIN"
                            }
                        ]
                    }
                ],
                "enabled": false
            }


+ Response 400 (application/json)


## Groups Collection [/groups]

### List all Groups [GET]  

Get All groups

+ Response 200 (application/json)

            {
                "groups": [
                    {
                        "id": 1,
                        "name": "auction",
                        "authorities": [
                            {
                                "id": 1,
                                "name": "ADMIN"
                            }
                        ]
                    }
                ]
            }    
            
### Add Group [POST]

used to create a new group and assign authority to the group.

---
**Error Code:**
- `GROUP_ALREADY_EXIST`
- `AUTHORITY_NOT_FOUND`
---

+ Request

            {
              "name": "auction-admin",
              "authorities": [
                {
                  "id": 1,
                  "name": "ADMIN"
                },
                {
                  "id": 3,
                  "name": "OCP"
                }
              ]
            }
            
+ Response 201 (application/json)

            {
                "id": 10981,
                "name": "auction-admin",
                "authorities": [
                    {
                        "id": 1,
                        "name": "ADMIN"
                    },
                    {
                        "id": 3,
                        "name": "OCP"
                    }
                ]
            }

+ Response 400 (application/json)
+ Response 500 (application/json)

# Group Customer



## Customer Notification [/customers/{customerToken}/notifications]

### Get Customer Notification[GET]

Used to get all available customer notifications.

---
**Error Code:**
 - `CUSTOMER_NOT_FOUND` : customer not found.
---

+ Parameters
    + customerToken: `S-2000000001` (string, required) - Customer token is a customer national Id and type.
    
+ Request (application/json)
 
+ Response 200 (application/json)

    + Attributes 
        + messageKey (string) - notification message key.
        + parameters (array[string]) - notification message parameters.
        + priority (enum[string]) -  notification priority type.
            + Members
                + `LOW` 
                + `MEDIUM`
                + `HIGH`
             
                    
    + Body
    
            {
              "notifications": [
                {
                  "messageKey": "BALANCE_PAYMENT",
                  "priority": "LOW",
                  "parameters": [ "0566666666", "500" ]
                },
                {
                  "messageKey": "CUSTOMER_IS_BLACKLISTED",
                  "priority": "HIGHT"
                }
              ]
            }
     
+ Response 404 (application/json)
+ Response 500 (application/json)

## Customer Eligibility [/customers/{customerToken}/eligibility]

### Customer eligibility [GET]

Used to check if the customer is blacklisted in the auction.
OCP will check if the customer is blacklisted in STC, and maintain customer error messages in case of the customer is blacklisted in auction and STC.

---
**Error Code:**
 - `CUSTOMER_NOT_FOUND` : customer not found.
---

+ Parameters
    + customerToken: `S-2000000001` (string, required) - Customer token is a customer national Id and type.

+ Request in case of the customer is eligible (application/json) 

+ Response 200 (application/json)

            {
               "eligible": true
            }

+ Request in case of the customer is not eligible (application/json) 

+ Response 200 (application/json)

            {
                "eligible": false,
                "notification": {
                    "messageKey": "CUSTOMER_IS_BLACKLISTED",
                    "parameters": [ "param1", "param2" ]
                }
            }
            
+ Response 404 (application/json)
+ Response 500 (application/json)

## Customer Deposit Transfer [/customers/{customerToken}/deposit-transfer]
    
### Transfer Deposit [POST]
Used to the transfer a deposit from a product to another product

---
**Error Code:**
- `INVALID_PRODUCT_ID` : product id not fount or invalid.
- `DEPOSIT_NOT_FOUND` : no deposit found for requested customer.
- `DEPOSIT_ALREADY_EXIST` : deposit already exist.
- `PRODUCT_IS_EXPIRED` : one or both product are expired.
- `DEPOSIT_TRANSFER_MUST_IN_SAME_CATEGORY` : transfer must be between products in same category.
- `DEPOSIT_TRANSFER_BACK_NOT_ALLOWED` : user cannot transfer back to original product.
- `HIGHEST_BIDDER_CANNOT_TRANSFER` : highest bidder cannot transfer their deposit.
- `DEPOSIT_TRANSFER_NOT_ALLOWED` : transfer not allowed.
- `CUSTOMER_NOT_FOUND` : customer not found.
---

+ Parameters
    + customerToken: `S-2000000001` (string, required) - Customer token is a customer national Id and type.
    
+ Attributes 
    + fromProductId     (number, required)  
    + toProductId       (number, required)  
    
+ Request (application/json)
    
    + Body

            {
              "fromProduct": 10887,
              "toProduct": 10888
            }
            
+ Response 201 (application/json)

+ Response 404 (application/json)
 
+ Response 500 (application/json)

## Customer Deposit [/customers/{customerToken}/deposit?{categoryId}]

### Get Customer Deposit [GET]

Used to get all customer deposit.

---
**Error Code:**
 
- `INVALID_CATEGORY_ID` : category id is invalid. 
- `CUSTOMER_NOT_FOUND` : customer not found.
       
---

+ Parameters
    + customerToken: `S-2000000001` (string, required) - Customer token is a customer national Id and type.
    
+ Request (application/json)
 
+ Response 200 (application/json)

    + Attributes 
    
        + id (number, required)   - product id
        + msisdn   (number, required) - auction number

    + Body
    
            {
                "products": [
                    {
                        "id": 10891,
                        "msisdn": "500000005"
                    },
                    {
                        "id": 10892,
                        "msisdn": "500000006"
                    },
                    {
                        "id": 10893,
                        "msisdn": "500000007"
                    }
                ]
            } 
 
+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

## Watchlist Collection [/customers/{customerToken}/watchlist{?page,size,sort,order}]

### List all watchlist products [GET]

Used to get all products in watchlist

---
**Error Code:**
 
- `CUSTOMER_NOT_FOUND` : customer not found.
       
---

+ Parameters
    
    + customerToken (string, required) - Customer token is a customer national Id and type.
    + page       (number, optional)
      + Default: 0
    + size       (number, optional)
      + Default: 20


+ Response 200 (application/json)

    + Attributes  
        + id (string) - Id of a product.
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + expiryDate  (string) - auction expiry date, timestamp format yyyy-MM-dd'T'HH:mm:ss
        + numberOfBids (number) - totale number of bids.
        + productStatus (enum[string]) - return list of product status
            + Members
                + `sold` 
                + `new`
                + `expired`
        + category  - 
            + id  (number) - Id of a category.
            + name (string) - name of a category
            
    + Body            
        
            {
                "page": {
                    "size": 20,
                    "number": 0,
                    "totalElements": 2,
                    "totalPages": 1
                },
                "products": [
                    {
                        "id": 10885,
                        "msisdn": "500000006",
                        "currentPrice": 300,
                        "expiryDate": "2018-03-10T11:12:08",
                        "numberOfBids": 0,
                        "productStatus": "expired",
                        "category": {
                            "name": "Momaiz Numbers",
                            "id": 5
                        }
                    },
                    {
                        "id": 10886,
                        "msisdn": "500000007",
                        "currentPrice": 300,
                        "expiryDate": "2018-03-10T11:12:08",
                        "numberOfBids": 0,
                        "productStatus": "expired",
                        "category": {
                            "name": "Momaiz Numbers",
                            "id": 5
                        }
                    }
                ]
            }
            
+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

## Remove Watchlist product [/customers/{customerToken}/watchlist{?productId}]

### Remove product from watchlist [DELETE]

Used to remove a product from customer watchlist

---
**Error Code:**
- `INVALID_PRODUCT_ID` : product id is not valid 
- `NOT_IN_WATCHLIST` : Product is not in watchlist.
- `CUSTOMER_NOT_FOUND` : customer not found.

---

+ Parameters

    + customerToken: `S-2000000001` (string, required) - Customer token is a customer national Id and type.
    + productId: `1001` (number, required) - Id of a product.
            
+ Response 204 (application/json)
+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

## Add Watchlist product [/customers/{customerToken}/watchlist]  

### Add product to Watchlist [POST]

Used to Add a product to customer watchlist

---
**Error Code:**

- `INVALID_PRODUCT_ID` : product id is invalid 
- `WATCHLIST_FULL`: max number of items in watchlist has been reached.
- `WATCHLIST_ITEM_EXIST` : Product already exists in the watchlist.
- `CUSTOMER_NOT_FOUND` : customer not found.
---
    
+ Parameters

    + customerToken: `S-2000000001` (string, required) - Customer token is a customer national Id and type.

+ Request   (application/json)

    + Attributes 
    
        + productId (number, required) - Id of a product.

    + Body
    
            {
               "productId" : 2544
            }
            
+ Response 201 (application/json)
+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)



## Customer ongoing Auction History Details [/customers/{customerToken}/ongoing-products{?page,size}]    

### Get Customer ongoing Auction History Details [GET]    

Used to get ongoing auctions.

---
**Error Code:**
 - `CUSTOMER_NOT_FOUND` : customer not found.
---

+ Parameters
    + customerToken   (string, required) - Customer token is a customer national Id and type.
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 10
      


+ Request (application/json)
 
+ Response 200 (application/json)

    + Attributes 
        + id (number)   - id of a product
        + msisdn (string) -  auction number.
        + numberOfBids (number) - total number of bid.
        + currentPrice (number) - the total auction price.
        + customerBid (number) - the last customer bid.
        + customerBidPrice (number) - the last customer bid price.
        + category  - auction category
            + id  (number) - Id of a category.
            + name (string) - name of a category
        + expiryDate (string) - auction expiry date.
            
    + Body
    
            {
              "products": [
                    {
                      "id":100,
                      "msisdn": "0566587458",
                      "customerBid": 6,
                      "numberOfBids": 15,
                      "customerBidPrice": 4000,
                      "expiryDate": "2017-12-09T13:11:39",
                      "currentPrice": 6930,
                      "category": {
                        "Id": 27,
                        "name": "Bronze Numbers"
                      }
                    } ,
                   {
                      "id":100,
                      "msisdn": "0566587458",
                      "customerBid": 6,
                      "numberOfBids": 15,
                      "customerBidPrice": 4000,
                      "expiryDate": "2017-12-09T13:11:39",
                      "currentPrice": 6930,
                      "category": {
                        "Id": 27,
                        "name": "Bronze Numbers"
                      }
                    }
                    
                  ],
              "page": {
                "size": 2,
                "totalElements": 100,
                "totalPages": 50,
                "number": 1
              }
            }
            
+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

## Customer lost Auction History Details [/customers/{customerToken}/lost-products{?page,size}]    

### Get Customer lost Auctions History Details [GET]    

Used to get lost auctions history Details.

---
**Error Code:**
 - `CUSTOMER_NOT_FOUND` : customer not found.
---

+ Parameters
    + customerToken  (string, required) - Customer token is a customer national Id and type.
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 10
            
+ Request (application/json)
 
+ Response 200 (application/json)

    + Attributes 
        + id (number)   - id of a product
        + msisdn (string) -  auction number.
        + numberOfBids (number) - total number of bid.
        + currentPrice (number) - the total auction price.
        + customerBid (number) - the last customer bid.
        + customerBidPrice (number) - the last customer bid price.
        + category  - auction category
            + id  (number) - Id of a category.
            + name (string) - name of a category
        + expiryDate (string) - auction expiry date.
            
    + Body
    
            {
              "products": [
                    {
                      "id":100,
                      "msisdn": "0566587458",
                      "customerBid": 6,
                      "customerBidPrice": 4000,
                      "numberOfBids": 15,
                      "expiryDate": "2017-12-09T13:11:39",
                      "currentPrice": 6930,
                      "category": {
                        "Id": 27,
                        "name": "Bronze Numbers"
                      }
                    } ,
                   {
                      "id":101,
                      "msisdn": "0566587458",
                      "customerBid": 6,
                      "customerBidPrice": 4000,
                      "numberOfBids": 15,
                      "expiryDate": "2017-12-09T13:11:39",
                      "currentPrice": 6930,
                      "category": {
                        "Id": 27,
                        "name": "Bronze Numbers"
                      }
                    }
                    
                  ],
              "page": {
                "size": 2,
                "totalElements": 100,
                "totalPages": 50,
                "number": 1
              }
            }
            
+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

# Group Winner

## Winner Products [/winners/{customerToken}/products{?page,size,order}]

### Get Winner products Details [GET]

Used to get customer winning products

---
**Error Code:**
 - `CUSTOMER_NOT_FOUND` : customer not found.
---

+ Parameters
    + customerToken  (string, required) - Customer token is a customer national Id and type.
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 10
    + order     (optional)
      + Default: `DESC`
      + Members
            + `ASC`
            + `DESC`
            
+ Request (application/json)
 
+ Response 200 (application/json)

    + Attributes 
        + productId (number )   - Product Id.
        + msisdn (string    ) -  auction number.
        + customerBid (number,  ) - Customer bids count.
        + currentPrice (number ) - the total auction price includes vat amount.
        + shipping  - return shipping method
            + method  (string) - return method type [delivery, branch]
            + address (string) - return longitudes and latitudes description when shipping method is delivery.
        + category  - auction category
            + id  (number) - Id of a category.
            + name (string) - name of a category
        + paymentStatus (enum[string]) - balance payment status one of the below statuses will be returned 
            + Members
                + `PAID` - it means that the auction number has been already paid and there is no farther action.  
                + `PENDING` - it means the customer has already submitted the bank Transfer information and need approval from Finance business there is no farther action.  
                + `UNPAID` - it means the user did not pay the balance payment and it needs Action to show to the customer to buy the balance amount.  
                + `EXPIRED` - it means the Auction has been expired and the customer did not pay the balance payment and there is no farther action. 
                + `REJECTED` - it means the customer has submitted the bank Transfer information but he got rejected with reason and it need Action to show to the customer to buy the balance amount. 

    + Body
        
            {
                "page": {
                    "size": 100,
                    "number": 0,
                    "totalElements": 3,
                    "totalPages": 1
                },
                "products": [
                    {
                        "productId": 11047,
                        "msisdn": "500000007",
                        "customerBid": 4,
                        "currentPrice": 6300,
                        "category": {
                            "name": "Momaiz Numbers",
                            "id": 5
                        },
                        "paymentStatus": "PENDING",
                        "shipping": {
                            "method": "DELIVERY",
                            "address": "24.757698250561216,46.71589829027653"
                        }
                    },
                    {
                        "productId": 11042,
                        "msisdn": "500000002",
                        "customerBid": 0,
                        "currentPrice": 21000,
                        "category": {
                            "name": "Gold Numbers",
                            "id": 2
                        },
                        "paymentStatus": "PAID",
                        "shipping": {
                            "method": "BRANCH"
                        }
                    },
                    {
                        "productId": 11041,
                        "msisdn": "500000001",
                        "customerBid": 1,
                        "currentPrice": 26250,
                        "category": {
                            "name": "Diamond Numbers",
                            "id": 1
                        },
                        "paymentStatus": "UNPAID",
                        "shipping": {
                            "method": "BRANCH"
                        }
                    }
                ]
            }
            
   
            
+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

## Winner Shipping [/winners/{customerToken}/products/{productId}/shippingMethod]

### Update Winner Shipping Method [PUT]

Used to update winner shipping method, the default winner shipping address is a branch.

---
**Error Code:**
- `INVALID_PRODUCT_ID`: product id is null or invalid. 
- `PRODUCT_IS_NOT_EXPIRED` - the product must expire.
- `CUSTOMER_NOT_FOUND` : customer not found.
---

+ Parameters
    + customerToken: `S-2000000001` (string, required) - Customer token is a customer national Id and type.
    + productId  (number, required) - product Id of a winner.

+ Request  (application/json)

    + Attributes
    
        + method (string) - shipping method [DELIVERY, BRANCH].
        + address (string) - describe longitudes and latitudes. 
        
        
    + Body
                        
            {
                "method":"DELIVERY",
                "address": "24.757698250561216,46.71589829027653"
            }
            
+ Response 204  
+ Response 404 (application/json)
+ Response 500 (application/json)

## Winner Remaining Balance Payment [/winners/{customerToken}/products/{productId}/remainingBalancePayment]

### Get Remaining Balance Payment Details [GET]

Return a remaining balance payment details for a specific product

---
**Error Code:**
- `PRODUCT_IS_NOT_EXPIRED` : product is not expired
- `INVALID_PRODUCT_ID` : product id is not valid
- `PAYMENT_OVERDUE` : Product balance payment time exceeded
- `BALANCE_ALREADY_PAID` : balance payment already paid for this product.
- `PAYMENT_NOT_FOUND` : No payment found for this product
- `DEPOSIT_NOT_FOUND` : No deposit found for this product.
- `CUSTOMER_NOT_FOUND` : customer not found.
---

+ Parameters
    + customerToken: `S-2000000001` (string, required) - Customer token is a customer national Id and type.
    + productId  (number, required) - product Id of a winner.
 
+ Response 200 (application/json)

    + Attributes  
        + productId (number) - Id of a product. 
        + msisdn (string) - Auction number.
        + vatRate (number) - Value added tax rate.
        + balanceDueBefore  (string) - The last allowed time to pay remaining balance amount.
        + remainingBalanceAmount (number) - Remaining balance amount to be paid.
        + intent   (enum[string], required)
            + Members
                + `PURCHASE`
                + `BID`
      
    + Body  
    
            {
                "productId": 721,
                "msisdn": "500000001",
                "vatRate": 5,
                "balanceDueBefore": "2017-12-09T13:11:39",
                "remainingBalanceAmount": 100040,
                "intent" : "purchase"
            }

+ Response 404 (application/json)
+ Response 500 (application/json)    

 
## Winner Payments [/winners/{customerToken}/products/{productId}/payments]

### Get Winner Payments Details [GET]

Return all payment transactions history for a specific winner

---
**Error Code:**
- `INVALID_PRODUCT_ID` : product id is not valid.
- `PAYMENT_NOT_FOUND` : No payment found for this product.
- `CUSTOMER_NOT_FOUND` : customer not found.
---

+ Parameters
    + customerToken: `S-2000000001` (string, required) - Customer token is a customer national Id and type.
    + productId  (number, required) - product Id of a winner.

+ Response 200 (application/json)

    + Attributes  
        + productId (number) - Id of a product. 
        + msisdn (string) - Auction number.
        + vatRate (number) - Value added tax rate.
        + payments
            + amount (number, required) - payment transaction amount (included VAT).
            + type (enum[string])
                + Members
                    + `DEPOSIT`
                    + `BALANCE`
            + status (enum[string]) - balance payment status one of the below statuses will be returned 
                + Members
                    + `PAID` - it means that the auction number has been already paid and there is no farther action.  
                    + `PENDING` - it means the customer has already submitted the bank Transfer information and need approval from Finance business there is no farther action.  
                    + `UNPAID` - it means the user did not pay the balance payment and it needs Action to show to the customer to buy the balance amount.  
                    + `EXPIRED` - it means the Auction has been expired and the customer did not pay the balance payment and there is no farther action. 
                    + `REJECTED` - it means the customer has submitted the bank Transfer information but he got rejected with reason and it need Action to show to the customer to buy the balance amount. 
            + method (enum[string])
                 + Members
                     + `CREDIT_CARD`              
                     + `BANK_TRANSFER`
            + date (string, required) - payment transaction date, timestamps format yyyy-MM-dd'T'HH:mm:ss.
            + reasonMessage (object)
                 + messageKey (string) - notification message key.
                 + parameters (array[string]) - notification message parameters.
    + Body
    
            {
              "productId": 721,
              "msisdn": "500000001",
              "vatRate": 5,
              "payments": [
                {
                  "amount": "3150",
                  "type": "DEPOSIT",
                  "method": "CREDIT_CARD",
                  "status": "PAID",
                  "date": "5/14/2018 11:18:00.000000 AM"
                },
                {
                  "amount": "3150",
                  "type": "BALANCE",
                  "method": "BANK_TRANSFER",
                  "status": "REJECTED",
                  "reasonMessage": {
                    "messageKey": "INVALID_PAYMENT_AMOUNT",
                    "parameters": [
                      "0566666666",
                      500
                    ]
                  },
                  "date": "5/20/2018 11:18:00.000000 AM"
                },
                {
                  "amount": "3150",
                  "type": "BALANCE",
                  "method": "BANK_TRANSFER",
                  "status": "PAID",
                  "date": "5/20/2018 11:18:00.000000 AM"
                }
              ]
            }

+ Response 404 (application/json)
+ Response 500 (application/json)
 

# Group Category


## Categories Collection [/categories]     

### List all Categories [GET]

Used to return a list of all available categories in the auction system.

+ Request (application/json)

    + Headers

            Accept-Language: en

+ Response 200 (application/json)

        {
            "categories": [
                {
                    "name": "Bronze Numbers",
                    "id": 1
                },
                {
                    "name": "Diamond Numbers",
                    "id": 2
                },
                {
                    "name": "Gold Numbers",
                    "id": 3
                },
                {
                    "name": "Momaiz Numbers",
                    "id": 4
                },
                {
                    "name": "Silver Numbers",
                    "id": 5
                }
            ]
        }
        

+ Response 500 (application/json)     

## Categories Detail [/categories/{id}]     

+ Parameters
    + id: `1` (number, required) - Id of a Category.
    
### Get Category [GET]  

Returns a single Category

---
**Error Code:**
- `CATEGORY_NOT_FOUND`: category id not found.
---

+ Request (application/json)

    + Headers

            Accept-Language: en
            
+ Response 200 (application/json)

            {
                "id": 1,
                "name": "Diamond Numbers",
                "minimumIncrement": 2000,
                "depositAmount": 20000,
                "purchasePrice": 50000000000000,
                "purchaseDisablePercentage": 50,
                "isAutoBidAllowed": false,
                "isPurchaseAllowed": true,
                "numberOfBidToStartAutoBid" : 25 ,
                "purchaseDepositAmount": 1000
            }

+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

### Update Category [PUT]

Used to Update Category by Id

---
**Error Code:**
- `CATEGORY_NOT_FOUND`: category id not found.
---

+ Request (application/json)

    + Headers

            Accept-Language: en
            
    + Body
            
            {
                "name": "Diamond Numbers",
                "minimumIncrement": 2000,
                "depositAmount": 20000,
                "purchasePrice": 50000000000000,
                "purchaseDisablePercentage": 50,
                "isAutoBidAllowed": false,
                "isPurchaseAllowed": true,
                "numberOfBidToStartAutoBid" : 25 ,
                "purchaseDepositAmount": 1000
            }

+ Response 204 (application/json)

+ Response 500 (application/json)



# Group Product

## Widget Details [/widgets/{widgetName}{?page,size,order}]   

### Get Widgets Details [GET]

Used to return a specific auction widgets

+ Parameters
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 10
    + widgetName     (required) - Possible Value for product widget
      + Members
            + `highestBids`
            + `mostBids`
            + `mostViewed` 
    + order     (optional)
      + Default: `ASC`
      + Members
            + `ASC`
            + `DESC`
    
+ Response 200 (application/json)
    
     + Attributes  
        + id (number) - Id of a product.
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + expiryDate (string) - auction expiry date.
        + numberOfBids(string) - number of bid on product
        + productStatus (enum[string]) - return list of product status
            + Members
                + `sold` 
                + `new`
                + `expired`
        + category  - 
            + id  (number) - Id of a category.
            + name (string) - name of a category
 
 + Body
    
            {
                "page": {
                    "size": 2,
                    "number": 0,
                    "totalElements": 2,
                    "totalPages": 156
                },
                "products": [
                    {
                        "id": 10529,
                        "msisdn": "500000008",
                        "currentPrice": 20000,
                        "expiryDate": "2018-03-30T12:02:59",
                        "numberOfBids": 0,
                        "productStatus": "new",
                        "category": {
                            "name": "Diamond Numbers",
                            "id": 1
                        }
                    },
                    {
                        "id": 10530,
                        "msisdn": "500000009",
                        "currentPrice": 20000,
                        "expiryDate": "2018-03-30T12:02:59",
                        "numberOfBids": 0,
                        "productStatus": "new",
                        "category": {
                            "name": "Diamond Numbers",
                            "id": 1
                        }
                    }
                ]
            }
            
            
+ Response 400 (application/json)
+ Response 500 (application/json)

## Add Products [/products]

### Add Products [POST]

Used to Add a list of products to the Auction system.

---
**Error Code:**
- `BATCHES_OVERLAP_NOT_ALLOWED` : Auction Batches overlap is not allowed.
- `BATCH_EXISTS` : batch id already exists.
---
+ Request (application/json)
    + Body
                        
            {
              "batchId": "AUC1000001",
              "startDate": "2020-04-28T12:4:00",
              "endDate": "2020-05-24T12:2:59",
              "auctionNumbers": [
                {
                  "class": "SILVER",
                  "msisdn": "500000001"
                },
                {
                  "class": "GOLD",
                  "msisdn": "500000002"
                },
                {
                  "class": "DIAMOND",
                  "msisdn": "500000003"
                },
                {
                  "class": "BRONZE",
                  "msisdn": "500000004"
                },
                {
                  "class": "MOMAIZ",
                  "msisdn": "500000005"
                },
                {
                  "class": "AUCTION",
                  "msisdn": "500000006"
                },
                {
                  "class": "SPECIAL",
                  "msisdn": "500000007"
                },
                {
                  "class": "ECONOMY",
                  "msisdn": "500000008"
                },
                {
                  "class": "REGULAR",
                  "msisdn": "500000009"
                }
              ]
            }

            
+ Response 202 
+ Response 400 (application/json)
+ Response 500 (application/json)

## Products Collection [/categories/{id}/products{?page,size,sort,order}]

### List All Products by category [GET]

Return a list of all products in a specific category

---
**Error Code:**
- `CATEGORY_NOT_FOUND` : category not found
---
+ Parameters
    
    + id (number) - category id
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 100
    + sort     (optional)
      + Default: `id`
      + Members
            + `price`
            + `numberOfBids`
            + `views` 
            + `id`
    + order     (optional)
      + Default: `ASC`
      + Members
            + `ASC`
            + `DESC`
    
+ Response 200 (application/json)

     + Attributes  
        + id (number) - Id of a product.
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + expiryDate (string) - auction expiry date.
        + numberOfBids(string) - number of bid on product
        + productStatus (enum[string]) - return list of product status
            + Members
                + `sold` 
                + `new`
                + `expired`
        + category  - 
            + id  (number) - Id of a category.
            + name (string) - name of a category
            
    + Body            
        
            {
                "page": {
                    "size": 5000,
                    "number": 0,
                    "totalElements": 540,
                    "totalPages": 1
                },
                "products": [
                    {
                        "id": 721,
                        "msisdn": "500000001",
                        "currentPrice": 20000,
                        "expiryDate": "2018-04-24T12:02:59",
                        "numberOfBids": 0,
                        "productStatus": "new",
                        "category": {
                            "name": "Diamond Numbers",
                            "id": 1
                        }
                    },
                    {
                        "id": 722,
                        "msisdn": "500000002",
                        "currentPrice": 20000,
                        "expiryDate": "2018-04-24T12:02:59",
                        "numberOfBids": 0,
                        "productStatus": "new",
                        "category": {
                            "name": "Diamond Numbers",
                            "id": 1
                        }
                    }
                ]
            }
 
+ Response 400 (application/json)
+ Response 404 (application/json)
+ Response 500 (application/json)

## Products Detail [/products/{id}{?customerToken}]     

### Get Product Detail [GET]

Return a single product detail resource. 

+ Parameters

    + id: `1001` (number, required) - Id of a product.
    + customerToken: `S-2000000001` (string, required) - Customer token is a customer national Id and type.


+ Request In case of request sent with customerToken (application/json)
                              
+ Response 200 (application/json)

    + Attributes  
        + id (string) - Id of a product. 
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + expiryDate  (string) - auction expiry date, timestamp format yyyy-MM-dd'T'HH:mm:ss
        + numberOfBids (number) - totale number of bids.
        + isAutoBidAllowed  (boolean) - return if auto bid featuer allowed
        + hasDeposit  (boolean) - return if the customer has deposit or not
        + isProductInWatchlist (boolean) - used to know the product in watchlist or not.
        + depositAmount - product deposit amount included VAT amount.
        + minimumIncrement (string)  - product minimum Increment
        + productStatus (enum[string]) - return list of product status
            + Members
                + `sold` 
                + `new`
                + `expired`
        + customerBidStatus (enum[string]) -  return list of bid status belongs to a specific customer, return none if no customer sent in the request 
            + Members
                + `noBid`
                + `highestBidder`
                + `outbid` 
        + purchase  - 
            + isPurchaseAllowed  (boolean) - return if  product purchase featuer is allowed  
            + purchasePrice (number)- fixed product price included VAT amount . 
            + depositAmount (number) - product deposit amount included VAT amount.
        + category  - auction category
            + id  (number) - Id of a category.
            + name (string) - name of a category
            
      
    + Body
    
            {
                "id": 10953,
                "msisdn": "500000001",
                "currentPrice": 2100,
                "expiryDate": "2018-03-28T16:38:25",
                "numberOfBids": 6,
                "productStatus": "sold",
                "category": {
                    "name": "Momaiz Numbers",
                    "id": 5
                },
                "isAutoBidAllowed": false,
                "customerBidStatus": "noBid",
                "minimumIncrement": 100,
                "hasDeposit": true,
                "depositAmount": 300,
                "isProductInWatchlist": false,
                "purchase": {
                    "isPurchaseAllowed": true,
                    "depositAmount": 2000,
                    "purchasePrice": 10000
                }
            }

+ Request In case of request sent without customerToken (application/json)
                              
+ Response 200 (application/json)

    + Attributes  
        + id (string) - Id of a product.
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + expiryDate  (string) - auction expiry date, timestamp format yyyy-MM-dd'T'HH:mm:ss
        + numberOfBids (number) - totale number of bids.
        + isAutoBidAllowed  (boolean) - return if auto bid featuer allowed
        + minimumIncrement (string)  - product minimum Increment.
        + depositAmount - product deposit amount.
        + productStatus (enum[string]) - return list of product status
            + Members
                + `sold` 
                + `new`
        + purchase  - 
            + isPurchaseAllowed  (boolean) - return if  product purchase featuer is allowed  
            + purchasePrice (number)- fixed product price. 
            + depositAmount (number) - product deposit amount.
        + category  - auction category
            + id  (number) - Id of a category.
            + name (string) - name of a category
            
      
    + Body
    
            {
                "id": 10953,
                "msisdn": "500000001",
                "currentPrice": 2100,
                "expiryDate": "2018-03-28T16:38:25",
                "numberOfBids": 6,
                "productStatus": "sold",
                "category": {
                    "name": "Momaiz Numbers",
                    "id": 5
                },
                "isAutoBidAllowed": false,
                "customerBidStatus": "noBid",
                "minimumIncrement": 100,
                "hasDeposit": false,
                "depositAmount": 300,
                "isProductInWatchlist": false,
                "purchase": {
                    "isPurchaseAllowed": true,
                    "depositAmount": 2000,
                    "purchasePrice": 10000
                }
            }
            
+ Response 404 (application/json)
+ Response 400 (application/json)
+ Response 500 (application/json)

## Search Products [/products/search{?page,size,msisdn}]

### Search [GET]

Return a list of all matched msisdn

+ Parameters
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 10
    + msisdn    (number) - complate or a part of auction number
    
+ Response 200 (application/json)

    + Attributes  
        
        + id (string) - product id.
        + msisdn (string) - The auction number.
        + category  - 
            + id  (number) - Id of a category.
            + name (string) - name of a category

    + Body  
    
            {
                "page": {
                    "size": 2,
                    "number": 0,
                    "totalElements": 2,
                    "totalPages": 270
                },
                "products": [
                    {
                        "id": 721,
                        "msisdn": "500000001",
                        "category": {
                            "name": "Diamond Numbers",
                            "id": 1
                        }
                    },
                    {
                        "id": 730,
                        "msisdn": "500000001",
                        "category": {
                            "name": "Diamond Numbers",
                            "id": 1
                        }
                    }
                ]
            }

+ Response 400 (application/json)
+ Response 500 (application/json)            
            

# Group Batch

## Batches Collection [/batches{?startDate,endDate}]

### List all Expired Batches  [GET]

Return list of all expired batches

---
**Error Code:**
- `INVALID_DATE_RANGE` : End date must me greater than start date.
     
---
+ Parameters
    + startDate  (date) - timestamp format yyyy-MM-dd'T'HH:mm:ss
    + endDate    (date) - timestamp format yyyy-MM-dd'T'HH:mm:ss

    
+ Request (application/json)

    + Headers

            Accept-Language: en
            
+ Response 200 (application/json)

        {
          "batches": [
            {
              "id": "AUC0003",
              "endDate": "2017-05-24T14:25:10",
              "startDate": "2017-05-24T14:25:10"
            },
            {
              "id": "AUC0004",
              "endDate": "2016-05-24T14:25:10",
              "startDate": "2017-05-24T14:25:10"
            }
          ]
        }

+ Response 400 (application/json)

+ Response 500 (application/json)


# Group Payment 

## Payment Method List [/payments/paymentMethods{?productId}]

### Get Payment Method List[GET]

Used to get all available payment method for specific productId.

---
**Error Code:**
- `INVALID_PRODUCT_ID`: product id is null or invalid. 
- `PRODUCT_IS_NOT_EXPIRED` - the product must expire to provide a list of payment method.
- `PAYMENT_NOT_ALLOWED`: payment is not allowed due the product payment is ended.
       
---

+ Parameters
    + productId: `27` (number, required) - product Id.
    
+ Request (application/json)
 
+ Response 200 (application/json)

    + Attributes 
        + paymentMethods (array[string])  - the list of available payment method to be used to pay balance payment

    + Body
    
            {
              "paymentMethods": [
                "creditCard",
                "bankTransfer"
              ]
            }
     
+ Response 400 (application/json)
+ Response 500 (application/json)

## Credit Card Payment [/payments/creditCard]

### Place Credit Card Payment [POST]

Used to add a new credit card payment transaction. 

The accepted payment credit card type is `Visa` or `Mastercard`, Therefore `American Express` is not accepted in the auction system.

---
**Error Code:**
- `INVALID_PRODUCT_ID` - product id is invalid.
- `CUSTOMER_IS_BLACKLISTED` - the customer is blacklisted in the auction.
- `PRODUCT_IS_EXPIRED` - product has expired. The product related to this request has expired.
- `DEPOSIT_NOT_PAID` - the deposit amount must be paid before attempt balance payment. 
- `AMOUNT_MISMATCH` - the amount sent in the request doesn't match the actual amount in the auction.
- `DEPOSIT_ALREADY_PAID` - the customer already paid deposit payment for this product.
- `BALANCE_ALREADY_PAID` - the customer already paid balance payment for this product.
- `PAYMENT_NOT_ALLOWED` - The payment related to this request not allowed.
- `FEATURE_UNSUPPORTED_FOR_PRODUCT` - The feature is disabled or unsupported.
- `BIDDING_AMOUNT_EXCEEDED_FIXED_PRICE` - the bidding amount exceeded 80% of the product fixed price.
- `UNKNOWN_ERROR  (Technical Error) `: an internal server error has occurred. Resend the request at another time. If this error persists, contact Auction Team Support.
---

+ Request (application/json)

    + Attributes 
        + productId      (number, required) - Product ID
        + customerToken  (string, required) - Customer token is a customer national Id and type.
        + intent   (enum[string], required)
            + Members
                + `purchase`
                + `bid`
        + transaction
            + id  (string, required) - payment transaction id
            + amount (number, required) - payment transaction amount (inculded VAT).
            + confirmationNumber (string, required) - STC confirmation number.
            + date (string, required) - payment transaction date, timestamp format yyyy-MM-dd'T'HH:mm:ss 
            + type (enum[string], required) - transaction type
                + Members
                    + `deposit`
                    + `balance`

    + Body
    
            {
              "productId": 10890,
              "customerToken": "S-2000000001",
              "intent": "bid",
              "transaction": {
                "id": "09b8acf0-939f34-09bddfff",
                "date": "2017-04-25T15:05:33",
                "confirmationNumber": "STC-",
                "amount": 9135,
                "type": "balance"
              }
            }
        

+ Response 204 (application/json)
+ Response 400 (application/json)
+ Response 500 (application/json)


## Bank Transfer Payment [/payments/bankTransfer]

### Place Bank Transfer Payment [POST]

Used to place a new bank transfer transaction. 

---
**Error Code:**
- `INVALID_PRODUCT_ID` - product id is invalid.
- `CUSTOMER_IS_BLACKLISTED` - the customer is blacklisted in the auction.
- `DEPOSIT_NOT_PAID` - the deposit amount must be paid before attempt balance payment. 
- `AMOUNT_MISMATCH` - the amount sent in the request doesn't match the actual amount in the auction.
- `BALANCE_ALREADY_PAID` - the customer already paid balance payment for this product.
- `PAYMENT_NOT_ALLOWED` - The payment related to this request not allowed.
- `FEATURE_UNSUPPORTED_FOR_PRODUCT` - The feature is disabled or unsupported.
- `PENDING_BANK_TRANSFER_PAYMENT_EXIST` - already pending bank payment exist.
- `INVALID_BANK_ID` : bank id is not valid. 
- `CUSTOMER_NOT_FOUND` : customer not found.
- `UNKNOWN_ERROR`: an internal server error has occurred. Resend the request at another time. If this error persists, contact Auction Team Support.
---

+ Request (application/json)

    + Attributes 
        + productId         (number, required) - product id.
        + customerToken     (string, required) - Customer token is a customer national Id and type.
        + intent   (enum[string], required)  - return if the customer is won the product by bidding or purchasing.
            + Members
                + `purchase`
                + `bid`
        + transaction
            + id  (string, required) - payment transaction id
            + amount (number, required) - payment transaction amount (inculded VAT)
            + date (string, required) - payment transaction date, timestamp format yyyy-MM-dd'T'HH:mm:ss 
            + type (enum[string], required) - transaction type
                + Members
                    + `deposit`
                    + `balance`
        + bankTranfer - required for bank Transfer payment method
            + bankId (number, required) -  bank id.
            + firstName (number, required) - transformer first name
            + lastName (number, required) -  transformer last name

    + Body
            
            {
              "productId": 11047,
              "customerToken": "S-2000000001",
              "intent": "bid",
              "transaction": {
                "id": "09b8acf0-939f34-09bdd7er",
                "amount": 5985,
                "date": "2018-05-13T15:20:33",
                "type": "BALANCE"
              },
              "bankTransfer": {
                "bankId": 1,
                "firstName": "waseem",
                "lastName": "judeh"
              }
            }
       
+ Response 204 (application/json)
+ Response 400 (application/json)
+ Response 500 (application/json)





## Validate Payment [/payments/validate]

### Validate Payment [POST]

Used to check a payment transaction before actually processing it, We'll perform our internal checks on the payment 
without adding it to the auction system.

---
---
**Error Code:**
- `INVALID_PRODUCT_ID` - product id is invalid.
- `CUSTOMER_IS_BLACKLISTED` - the customer is blacklisted in the auction.
- `PRODUCT_IS_EXPIRED` - product has expired. The product related to this request has expired.
- `DEPOSIT_NOT_PAID` - the deposit amount must be paid before attempt balance payment. 
- `AMOUNT_MISMATCH` - the amount sent in the request doesn't match the actual amount in the auction.
- `DEPOSIT_ALREADY_PAID` - the customer already paid deposit payment for this product.
- `BALANCE_ALREADY_PAID` - the customer already paid balance payment for this product.
- `PAYMENT_NOT_ALLOWED` - The payment related to this request not allowed.
- `FEATURE_UNSUPPORTED_FOR_PRODUCT` - The feature is disabled or unsupported.
- `BIDDING_AMOUNT_EXCEEDED_FIXED_PRICE` - the bidding amount exceeded 80% of the product fixed price.
- `CUSTOMER_NOT_FOUND` : customer not found.
- `UNKNOWN_ERROR  (Technical Error) `: an internal server error has occurred. Resend the request at another time. If this error persists, contact Auction Team Support.
---

+ Request (application/json)

    + Attributes 
        + productId         (number, required) - product id
        + customerToken     (string, required) - Customer token is a customer national Id and type.
        + intent   (enum[string], required)
            + Members
                + `purchase`
                + `bid`
        + transaction
            + amount (number, required) - payment transaction amount (inculded VAT).
            + type (enum[string], required) - transaction type
                + Members
                    + `deposit`
                    + `balance`
    + Body
    
            {
              "productId": 1001,
              "customerToken": "S-2000000001",
              "intent": "purchase",
              "transaction": {
                "amount": 1300,
                "type": "deposit"
              }
            }
       
+ Response 204 (application/json)
+ Response 400 (application/json)
+ Response 500 (application/json)

## Payments Reconcile Collection [/payments/reconcile{?batchId,transactionType}]

### List all Payments Reconcile Transaction [GET]

Return a list of all payment reconcile transaction for specific batch and transaction type

---
**Error Code:**
- `INVALID_BATCH_ID` : Batch Id is null or invalid.
- `INVALID_TRANSACTION_TYPE` : TransactionType value is invalid.
---
    
+ Parameters
    + batchId            (String, required)
    + transactionType    (enum[string]) 
        + Members
            + `CAPTURE` 
            + `REVERSAL`
            
+ Request
    + Headers

            Authorization: Basic [add 'username:password' encoded in base64]
            api-version: v1 OR v2
            
+ Response 200 (application/json)

        {
          "totalAmount": 999216,
          "totalTransactions": 424,
          "transactions": [
            {
              "id": "09b8acf0-9f08-43f3-9e54-ba6b6088b2cf",
              "amount": 1300,
              "date": "2017-04-25T15:05:33",
              "confirmationNumber": "STC-304399382"
            },
            {
              "id": "8095f868-9b2c-4100-b4b3-0b759e581506",
              "amount": 500,
              "date": "2017-04-25T07:08:36",
              "confirmationNumber": "STC-304393705"
            }
          ]
        }

+ Response 400 (application/json)

+ Response 500 (application/json)

##  Reversal Deposit [/payments/deposit-reversal]
    
### Reversal Deposit  [POST]
Used to released a deposit amount for a specific product.
the response back used to refresh value of transfer deposit and cancel the deposit

---
**Error Code:**
 
- `DEPOSIT_NOT_FOUND` : no deposit found for this product.
- `PRODUCT_IS_EXPIRED` : product is expired
- `NOT_ALLOWED_FOR_HIGHEST_BIDDER` : highest bidders cannot reversed their deposit
- `INVALID_PRODUCT_ID` : product id is not valid.
- `CUSTOMER_NOT_FOUND` : customer not found.
---
 
     
    
+ Request (application/json)
    
    + Attributes 
        + productId        (number, required)  - Product Id
        + customerToken       (string, required) - Customer token is a customer national Id and type.
        
    + Body

            {
                "productId": 15,
                "customerToken": "S-2000000001"
            }
            
+ Response 204 (application/json)

+ Response 400 (application/json)
 
+ Response 500 (application/json)

# Group Bid 
           
## Bids Collection [/bids]

### Place Bid [POST]

used to place a new bid for a specific product to a customer.
Note That: in not allowed to send both values for  `regularBidAmount`, `autoBidAmount`, it should one of them.

---
**Error Code:**
- `DEPOSIT_NOT_PAID` : customer didn't pay deposit payment.
- `CUSTOMER_IS_BLACKLISTED` : customer is blacklisted in auction.
- `PRODUCT_IS_EXPIRED` : Auction time is Expired.
- `BID_IS_LESS_THAN_MINIMUM_INCREMENT` : Bid is less than minimum bid.
- `WRONG_BID_TYPE` : bid type in request does not match auction bid type. (auto bid / regular bid) 
- `CUSTOMER_IS_HIGHEST_BIDDER` : the highest bidder cannot bid on himself.
- `CUSTOMER_NOT_FOUND` : customer not found.

---  
+ Request in case of biding type is regular bid (application/json) 


    + Headers

            Accept-Language: en
            
    + Body
            
            {
                "customerToken": "S-2000000001",
                "regularBidAmount": 5000,
                "productId": 1005
            }

+ Response 201 (application/json) 

    + Attributes 
    
        + numberOfBids (number) - totale number of bids.
        + isAutoBidAllowed  (boolean) - return weather of auto bid featuer enabled or disable
        + currentPrice (string) - return latest bid amount.
        + customerBidStatus (enum[string]) -  return list of bid status belongs to a specific customer, return none if no customer sent in the request 
            + Members
                + `highestBidder`
                + `outbid` 
        + purchase  - purchase information
            + isPurchaseAllowed  (boolean) - return if  product purchase featuer is allowed  
            + purchasePrice (number)- fixed product price. 
            + depositAmount (number) - product deposit amount.

    + Body
    
            {
              "numberOfBids": 37,
              "currentPrice": 5000,
              "customerBidStatus": "highestBidder",
              "isAutoBidAllowed": true,
              "purchase": {
                "isPurchaseAllowed":false
              }
            }

+ Request in case of biding type is auto bid (application/json) 


    + Headers

            Accept-Language: en
            
    + Body
            
            {
                "customerToken": "S-2000000001",
                "autoBidAmount" : 50000,
                "productId": 1001
            }
            
+ Response 201 (application/json) 

    + Attributes 
    
        + numberOfBids (number) - totale number of bids.
        + isAutoBidAllowed  (boolean) - return weather of auto bid featuer enabled or disable
        + currentPrice (string) - return latest bid amount.
        + customerBidStatus (enum[string]) -  return list of bid status belongs to a specific customer, return none if no customer sent in the request 
            + Members
                + `highestBidder`
                + `outbid` 
        + purchase  - purchase information
            + isPurchaseAllowed  (boolean) - return if true product purchase featuer is allowed, if false `purchasePrice` and `depositAmount` will not be return.
            + purchasePrice (number)- fixed product price.
            + depositAmount (number) - product deposit amount.

    + Body
    
            {
              "numberOfBids": 37,
              "currentPrice": 5000,
              "customerBidStatus": "highestBidder",
              "isAutoBidAllowed": true,
              "purchase": {
                "isPurchaseAllowed": true,
                "price": 800000,
                "depositAmount": 2000
                
              }
            }
            
+ Response 400 (application/json)