FORMAT: 1A
HOST: http://172.20.162.198:17011/auction


# Auction REST API v1.0

The Auction API provides a list of API for developers to interact with Auction system.
 
## HTTP request headers

The following is a mandatory header tags, that must be sent with each request.
  * `content-type` - The format of the request body - only application/json is supported at this time
  * `accept-language` - The language that you want the descriptions returned in - eg. en/ar.
  * `channel-name` - The channel name - example web,mobile.
  * `client-ip`  - The ip address of client.
  * `user-agent` - The app version of the mobile application that tries to consume the API.
  * `api-version` - The API version of auction application - eg. v1.
  * `authorization` - HTTP basic authentication. We use a HTTP header where we add 
                     'username:password' encoded in base64, you have to add '<B>Basic</B>' as a static prefix with each encoded credential.
                      <P><B> Example : </B></P> - `authorization: Basic dXNlcm5hbWU6cGFzc3dvcmQ=` 
                      
  
## HTTP response codes

  * `200` - The request completed OK
  * `201` - The specified object was created sucessfully
  * `204` - The request completed OK (No Content)
  * `400` - The request was not understood
  * `401` - authentication failed or user doesn't have permissions for requested operation.
  * `403` - You do not have access to the requested object
  * `404` - The object that was requested doesn't exist
  * `405` - The resource exists, but the wrong method was used. 
  * `500` - There was an internal API error
  * `501` - You have used a method (GET/PUT/POST/PATCH) not supported by this endpoint
  
## HTTP response headers

  * `content-type` - The format of the response body - only application/json is supported at this time
  * `cache-control` - used to specify directives for caching mechanisms in both requests and responses
  * `content-language` - describe the language(s) intended for the audience.
  * `date` -the date and time at which the message was originated.
  
## Error

In the responses for failed requests, Auction returns HTTP `4XX` or `5XX` status codes.

For all errors except validation errors, auction returns an error response body in following format:

     
```
{
    "errorCode": "ERROR_NAME",
    "message"  : "ERROR_MESSAGE"
}
```
##  Validation errors

For validation errors, Auction returns the HTTP `400 Bad Request` status code.

The server could not understand the request. Indicates one of these conditions:

* The API cannot convert the payload data to the underlying data type.
* The data is not in the expected data format.
* A required field is not available.
* A simple data validation error occurred.


The response body for validation errors includes additional error details in following format:

```
{
  "errorCode": "VALIDATION_ERROR",
  "fieldErrors": [
    {
      "field": "email",
      "message": "may not be null"
    }
  ]
}

```

## API Catalog

list of all APIs and their respective owners

<table>
    <tr>
        <td> OCP APIs</td>
        <td> <ul style="list-style-type:number">
              <li>List all Categories</li>
              <li>Add Products </li>
              <li>List All Products </li>
              <li>Get Product Details</li>
              <li>Search</li>
              <li>Please Bid</li>
              <li>Add Customer</li>
              <li>List All Products by Category</li>
            </ul> </td>   
    </tr>
    <tr>
        <td> Auction Admin API's</td>              
        <td> <ul style="list-style-type:number">
              <li>Get User</li>
              <li>Add User</li>
              <li>Update User</li>
              <li>List All Group</li>
              <li>Get Category</li>
              <li>Update Category</li>
            </ul> </td> 
    </tr>
    <tr>
        <td>Payment API's</td>              
        <td> <ul style="list-style-type:number">
              <li>Batches Batches Collection </li>
              <li>Payments Reconcile Collection</li>
            </ul> </td> 
    </tr>
</table>

# Group User

## User Collection [/users]

### Get User [GET]

Get All Users

+ Response 200 (application/json)

        {
          "users": [
            {
              "username": "ocp",
              "groups": [
                {
                  "id": 1,
                  "name": "auction",
                  "authorities": [
                    {
                      "id": 1,
                      "name": "ADMIN"
                    }
                  ]
                }
              ],
              "enabled": false
            },
            {
              "username": "payment",
              "groups": [
                {
                  "id": 46,
                  "name": "TEST_GROUP",
                  "authorities": [
                    {
                      "id": 1,
                      "name": "ADMIN"
                    }
                  ]
                }
              ],
              "enabled": false
            }
          ]
        }

### Add User [POST]
Add User

---
**Error Code:**
- `USER_ALREADY_EXIST`
- `GROUP_NOT_FOUND`

---
    
+ Request (application/json)
    
    + Body

            {
              "username": "test1234",
              "password": "Aa123456",
              "enabled": false,
              "groups": [
                {
                  "id": 1
                }
              ]
            }
            
+ Response 201 (application/json)

        {
            "username": "test1234",
            "groups": [
                {
                    "id": 1,
                    "name": "auction",
                    "authorities": [
                        {
                            "id": 1,
                            "name": "ADMIN"
                        }
                    ]
                }
            ],
            "enabled": false
        }


+ Response 400 (application/json)


     
## Users Detail [/users/{username}]
+ Parameters
    + username: `test` (string, required) - username.

### Update User [PATCH]

Update user active status

---
**Error Code:**
- `GROUP_NOT_FOUND`
---
+ Request (application/json)

        {
          "enabled": false,
          "groups": [
            {
              "id": 1
            }
          ]
        }
            
+ Response 200 (application/json)

            {
                "username": "test",
                "groups": [
                    {
                        "id": 1,
                        "name": "auction",
                        "authorities": [
                            {
                                "id": 1,
                                "name": "ADMIN"
                            }
                        ]
                    }
                ],
                "enabled": false
            }


+ Response 400 (application/json)


 
     

## Groups Collection [/groups]

### List all Groups [GET]  

Get All groups

+ Response 200 (application/json)

            {
                "groups": [
                    {
                        "id": 1,
                        "name": "auction",
                        "authorities": [
                            {
                                "id": 1,
                                "name": "ADMIN"
                            }
                        ]
                    }
                ]
            }    
# Group Customer

## Customer Collection [/customers]

### Add customer [POST]
Used to the add or update customer in the auction.
The customer type must be individual. 

---
**Error Code:**
- `INVALID_CUSTOMER_TYPE` : The customer type must be individual.
- `VALIDATION_ERROR` : Error message from fieldErrors attribute in validation error response body
- `INTERNAL_SERVICE_ERROR` : An internal service error has occurred. Resend the request at another time.
---
+ Request (application/json)
    
    + Body

            {
                "nationalId": "1254897561",
                "emailAddress": "test@stc.com",
                "firstName": "test",
                "lastName": "test",
                "username": "test",
                "contactNumber": "0578595468",
                "type": "individual"
            }
            
+ Response 201 (application/json)

+ Response 400 (application/json)

   
+ Response 500 (application/json)

## Customer Eligibility [/customers/{nationalId}/eligibility]

### Customer eligibility [POST]

Used to check if the customer is allowed to bid in auction.
 
---
**Error Code:**

- `CUSTOMER_NOT_FOUND`  . 
- `INTERNAL_SERVER_ERROR`  .
- `CUSTOMER_IS_BLACKLISTED`  .
 
---

+ Response 200 (application/json)

    + Body

            {
               "isEligible": true
            }
            
+ Response 404 (application/json)
    
+ Response 400 (application/json)
  
+ Response 500 (application/json)


    
## Transfer Deposit [/customers/{nationalId}/deposit/transfer]

### Transfer Deposit [POST]
Used to the transfer a deposit from a product to another product

---
**Error Code:**
 
- `DEPOSIT_REVERSED` : deposit to be transfered has been reversed.
- `VALIDATION_ERROR` : Error message from fieldErrors attribute in validation error response body
- `PRODUCT_IS_EXPIRED` : product is expired
- `DEPOSIT_TRANSFER_MUST_IN_SAME_CATEGORY` : transfer must be between products in same category
- `TRANSFER_BACK_NOT_ALLOWED` : user cannot transfer back to original product
- `HIGHEST_BIDDER_CANNOT_TRANSFER` : highest bidderse cannot transfer their deposit
- `INTERNAL_SERVICE_ERROR` : An internal service error has occurred. Resend the request at another time.
- `TRANSFER_NOT_ALLOWED` : transfer not allowed
       
---
+ Parameters

    + nationalId: `2125487985` (number, required) - national Id of a customer.
    
+ Request (application/json)
    
    + Body

            {
                "fromProduct": 15,
                "toProduct": 45
            }
            
+ Response 201 (application/json)

+ Response 400 (application/json)

 
    
     
            
+ Response 500 (application/json)

# Group Catalog

## Categories Collection [/catalog/categories]     

### List all Categories [GET]  

Used to return a list of all available categories in the auction system.

+ Request (application/json)

    + Headers

            Accept-Language: en
            Authorization: Basic [Encoded channel user credential]
            
+ Response 200 (application/json)

        {
            "categories": [
                {
                    "name": "Bronze Numbers",
                    "id": 32
                },
                {
                    "name": "Diamond Numbers",
                    "id": 30
                },
                {
                    "name": "Gold Numbers",
                    "id": 27
                },
                {
                    "name": "Momaiz Numbers",
                    "id": 31
                },
                {
                    "name": "Silver Numbers",
                    "id": 28
                }
            ]
        }
        
## Categories Detail [/catalog/categories/{id}]     

+ Parameters
    + id: `1` (number, required) - Id of a Category.
    
### Get Category [GET]  

Returns a single Category

---
**Error Code:**
- `CATEGORY_NOT_FOUND` : category id not found.
---

+ Request (application/json)

    + Headers

            Accept-Language: en
            
+ Response 200 (application/json)

            {
               "id":2,
               "name": "Diamond",
               "minimumIncrement": 200,
               "depositAmount":1000,
               "isAutoBidAllowed" : "true",
               "isPurchaseAllowed" : "true",
               "purchasePrice":100000,
               "numberOfBidToStartAutoBid" : 25,
               "purchaseDisablePercentege" : 80
            }

+ Response 400 (application/json)


 
             
+ Response 500 (application/json)

### Update Category [PUT]

+ Request (application/json)

    + Headers

            Accept-Language: en
            
    + Body
            
            {   
               "arabicName": "ماسي",
               "englishName": "Diamond",
               "minimumIncrement": 200,
               "depositAmount":1000,
               "isAutoBidAllowed" : "true",
               "isPurchaseAllowed" : "true",
               "purchasePrice":100000,
               "numberOfBidToStartAutoBid" : 25,
               "purchaseDisablePercentege" : 80
            }

+ Response 204 (application/json)

+ Response 500 (application/json)

## Products Collection [/catalog/products{?page,size,sort,order}]

### Add Products [POST]
Add list of products

---
**Error Code:**
- `AUC008` : Auction Batches overlap is not allowed.
---
+ Request (application/json)
    + Body
            
            {
              "startDate": "2017-11-19T12:4:00",
              "auctionNumbers": [
                {
                  "categoryId": 31,
                  "msisdn": "500008802"
                },
                {
                  "categoryId": 29,
                  "msisdn": "500009020"
                },
                {
                  "categoryId": 26,
                  "msisdn": "505555007"
                }
              ],
              "endDate": "2017-11-29T12:2:59",
              "batchId": "AUC1000057"
            }
+ Response 204


+ Response 500 (application/json)

## Products widget [/catalog/widgets/product{?page,size,order,widgetsType}]   

### Products Widgets [GET]

Return a list of all product widgets
---
**Error Code:**
- `TYPE_MISMATCH` : Type does not match on parameter 'parameter name' expected value of type 'parameter type', possible values: [value 1, value 2, ..etc]
---
+ Parameters
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 100
    + widgetsType     (optional)
      + Default: `views`
      + Members
            + `price`
            + `numberOfBids`
            + `views` 
    + order     (optional)
      + Default: `ASC`
      + Members
            + `ASC`
            + `DESC`
    
+ Response 200 (application/json)
 
            {
                  "products": [
                    {
                      "id": 1001,
                      "msisdn": "533996655",
                      "currentPrice": 8000,
                      "productStatus": "sold",
                      "category": [ { "Id": 27 , "name" : "Gold" }]
                                        
                    },
                    {
                      "id": 1002,
                      "msisdn": "5399999999",
                      "currentPrice": 8000,
                      "productStatus": "new",
                      "category": [ { "Id": 27 , "name" : "Gold" }]
                    }
                  ],
                  "links": {
                    "self": {
                      "href": "http://auction.stc.com.sa/products?page=1&size=2"
                    },
                    "first": {
                      "href": "http://auction.stc.com.sa/products?page=0&size=2"
                    },
                    "prev": {
                      "href": "http://auction.stc.com.sa/products?page=0&size=2"
                    },
                    "next": {
                      "href": "http://auction.stc.com.sa/products?page=2&size=2"
                    },
                    "last": {
                      "href": "http://auction.stc.com.sa/products?page=49&size=2"
                    }
                  },
                  "page": {
                    "size": 2,
                    "totalElements": 100,
                    "totalPages": 50,
                    "number": 1
                  }
            }

+ Response 400 (application/json)

     
## Category Products [/catalog/categories/{id}/products{?page,size,sort,order}]

### List All Products by category [GET]

Return a list of all products in a specific category

---
**Error Code:**
- `INVALID_CATEGORY_ID` : category id is null or invalid.
- `TYPE_MISMATCH` : Type does not match on parameter 'parameter name' expected value of type 'parameter type', possible values: [value 1, value 2, ..etc]
---
+ Parameters
    
    + id (number)
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 100
    + sort     (optional)
      + Default: `id`
      + Members
            + `price`
            + `numberOfBids`
            + `views` 
            + `id`
    + order     (optional)
      + Default: `ASC`
      + Members
            + `ASC`
            + `DESC`
    
+ Response 200 (application/json)
 
            {
                  "products": [
                    {
                      "id": 1001,
                      "msisdn": "533996655",
                      "currentPrice": 8000,
                      "productStatus": "sold",
                      "category": [ { "Id": 27 , "name" : "Gold" }]
                    },
                    {
                      "id": 1002,
                      "msisdn": "5399999999",
                      "currentPrice": 8000,
                      "productStatus": "new",
                      "category": [ { "Id": 27 , "name" : "Gold" }]
                    }
                  ],
                  "links": {
                    "self": {
                      "href": "http://auction.stc.com.sa/products?page=1&size=2"
                    },
                    "first": {
                      "href": "http://auction.stc.com.sa/products?page=0&size=2"
                    },
                    "prev": {
                      "href": "http://auction.stc.com.sa/products?page=0&size=2"
                    },
                    "next": {
                      "href": "http://auction.stc.com.sa/products?page=2&size=2"
                    },
                    "last": {
                      "href": "http://auction.stc.com.sa/products?page=49&size=2"
                    }
                  },
                  "page": {
                    "size": 2,
                    "totalElements": 100,
                    "totalPages": 50,
                    "number": 1
                  }
            }
 
+ Response 400 (application/json)


  
 
## Products Detail [/catalog/products/{id}{?nationalId}]     

### Get Product Detail [GET]

Return a single product detail resource.

+ Parameters

    + id: `1001` (number, required) - Id of a product.
    + nationalId:`1` (optional) - send nationalId if you looking for customer status. 
                                        
+ Response 200 (application/json)

    + Attributes  
        + id (string) - Id of a product.
        + msisdn (string) - auction number
        + currentPrice (string) - auction last price.
        + expiryDate  (string) - auction expiry date.
        + numberOfBids (number) - totale number of bids.
        + isAutoBidAllowed  (string) - return if auto bid featuer enabled or disable
        + isProductInWatchlist - used to know the product in watchlist or no.
        + productStatus (enum[string]) - return list of product status
            + Members
                + `sold` 
                + `new`
        + customerBidStatus (enum[string]) -  return list of bid status belongs to a specific customer, return none if no customer sent in the request 
            + Members
                + `noBid`
                + `highestBidder`
                + `outbid` 
        + category  - 
            + id  (number) - Id of a product.
            + name (string) - name of a category
            + minimumIncrement (string)  - category minimum Increment
      
    + Body
    
            {
              "id": 1001,
              "msisdn": "533996655",
              "currentPrice": 8000,
              "expiryDate": "12/13/2015 11:51:59.000000 AM",
              "numberOfBids": 15,
              "isAutoBidAllowed": false,
              "productStatus": "sold",
              "customerBidStatus": "noBid",
              "isProductInWatchlist" : true,
              "category": {
                "id":2,
                "name": "Diamond",
                "minimumIncrement": 200
              }
            }

+ Response 500 (application/json)

  
## Search  [/catalog/search/products{?page,size,msisdn}]

### Search [GET]

Return a list of all matched msisdn

+ Parameters
    + page      (number, optional)
      + Default: 0
    + size      (number, optional)
      + Default: 10
    + msisdn (number)
    
+ Response 200 (application/json)

    + Attributes  
        
        + msisdn (string) - The auction number

    + Body  
        
            {
              "products": [
                {
                  "msisdn": "50000655",
                  "id" : 5
                  
                },
               {
                  "msisdn": "50000685",
                  "id" : 7
                  
                }
              ],
              "links": {
                "self": {
                  "href": "http://auction.stc.com.sa/products?page=1&size=2"
                },
                "first": {
                  "href": "http://auction.stc.com.sa/products?page=0&size=2"
                },
                "prev": {
                  "href": "http://auction.stc.com.sa/products?page=0&size=2"
                },
                "next": {
                  "href": "http://auction.stc.com.sa/products?page=2&size=2"
                },
                "last": {
                  "href": "http://auction.stc.com.sa/products?page=49&size=2"
                }
              },
              "page": {
                "size": 2,
                "totalElements": 100,
                "totalPages": 50,
                "number": 1
              }
            }

# Group Batch

## Batches Collection [/batches{?startDate,endDate}]

### List all Expired Batches  [GET]

Return list of all expired batches
---
**Error Code:**
- `RANGE_ERROR` : End date must me greater than start date.
- `TYPE_CONVERSION_ERROR` : The value null of the field startDate is of the wrong type or the date format is incorrect.
    
---
+ Parameters
    + startDate  (date) - timestamp format yyyy-MM-dd'T'HH:mm:ss
    + endDate    (date) - timestamp format yyyy-MM-dd'T'HH:mm:ss

    
+ Request (application/json)

    + Headers

            Accept-Language: en
            
+ Response 200 (application/json)

        {
          "batches": [
            {
              "id": "AUC0003",
              "endDate": "2017-05-24T14:25:10",
              "startDate": "2017-05-24T14:25:10"
            },
            {
              "id": "AUC0004",
              "endDate": "2016-05-24T14:25:10",
              "startDate": "2017-05-24T14:25:10"
            }
          ]
        }

+ Response 400 (application/json)


  
 
+ Response 500 (application/json)


# Group Payment 

## Payments Reconcile Collection [/payments/reconcile{?batchId,transactionType}]

### List all Payments Reconcile Transaction [GET]

Return a list of all payment reconcile transaction for specific batch and transaction type
---
**Error Code:**
- `MISSING_PARAM` : Required PaymentTransactionType parameter "transactionType" is not present.
- `INVALID_BATCH_ID` : Batch Id is null or invalid.
- `TYPE_MISMATCH` : Type does not match on parameter transactionType expected value of type PaymentTransactionType, possible values: [capture, reversal]
- `INVALID_TRANSACTION_TYPE` : TransactionType value is invalid.
---
+ Parameters
    + batchId            (String, required)
    + transactionType    (enum[string]) 
        + Members
            + `capture` 
            + `reversal`
            
+ Response 200 (application/json)

        {
          "totalAmount": 999216,
          "totalTransactions": 424,
          "transactions": [
            {
              "id": "09b8acf0-9f08-43f3-9e54-ba6b6088b2cf",
              "amount": 1300,
              "date": "2017-04-25T15:05:33",
              "confirmationNumber": "STC-304399382"
            },
            {
              "id": "8095f868-9b2c-4100-b4b3-0b759e581506",
              "amount": 500,
              "date": "2017-04-25T07:08:36",
              "confirmationNumber": "STC-304393705"
            }
          ]
        }

+ Response 400 (application/json)


     
     
 

+ Response 500 (application/json)

# Group Bid 
           
## Bids Collection [/bids]

### Place Bid [POST]

You may create your own bid using this action. It takes a JSON
object containing a customer id and a amount of bid.

---
**Error Code:**
- `DEPOSIT_NOT_PAID` : customer didn't pay deposit payment.
- `CUSTOMER_IS_BLACKLISTED` : customer is blacklisted in auction.
- `AUCTION_IS_NOT_ACTIVE` : Auction time is finished or not started yet.
- `BID_IS_LESS_THAN_MINIMUM_INCREMENT` : Bid is less than minimum bid.
- `WRONG_BID_TYPE` : bid type in request does not match auction bid type. (auto bid / regular bid) 
---  
+ Request (application/json)


    + Headers

            Accept-Language: en
            
    + Body
            
            {
                "nationalId": 10999999,
                "regularBidAmount": 5000,
                "autoBidAmount" : null,
                "productId": 1
            }

+ Response 201 (application/json)

    + Attributes 
    
        + numberOfBids (number) - totale number of bids.
        + isAutoBidAllowed  (string) - return weather of auto bid featuer enabled or disable
        + currentPrice (string) - return latest bid amount.
        + customerBidStatus (enum[string]) -  return list of bid status belongs to a specific customer, return none if no customer sent in the request 
            + Members
                + `highestBidder`
                + `outbid` 

    + Body
    
            {
               "numberOfBids": 37,
               "currentPrice": 5000,
               "customerBidStatus": "highestBidder",
               "isAutoBidAllowed":true
            }

+ Response 400 (application/json)
        

    
 
 
# Group Watchlist

## Remove Watchlist [/watchlist/product{?productId,nationalId}]

### Remove watchlist item [DELETE]

Used to remove an item from watchlist

---
**Error Code:**
- `INVALID_PRODUCT_ID` : product id is not valid 
- `INTERNAL_SERVICE_ERROR` : An internal service error has occurred. Resend the request at another time.
- `INVALID_CUSTOMER_ID` : customer id is not valid.
- `TYPE_MISMATCH` : Type does not match on parameter 'parameter name' expected value of type 'parameter type', possible values: [value 1, value 2, ..etc]
---
+ Parameters

    + nationalId: `21254879985` (number, required) - national Id of a customer.
    + productId: `1001` (number, required) - Id of a product.

            
+ Response 201 (application/json)

+ Response 400 (application/json)


        
 
            
+ Response 500 (application/json)
               
## Add Watchlist [/watchlist/product]

### Add watchlist item [POST]

Used to Add an item from watchlist
---
**Error Code:**

- `INVALID_PRODUCT_ID` : product id is not valid 
- `INTERNAL_SERVICE_ERROR` : An internal service error has occurred. Resend the request at another time.
- `INVALID_CUSTOMER_ID` : customer id is not valid 
- `MAX_NUMBER_OF_PRODUCTS_EXCEEDED`: max number of items in watchlist has been exceeded.
- `PRODUCT_IS_EXPIRED` : product is expired.
---
+ Request (application/json)
    
    + Body

            {
                "productId": 15
            }    
            
+ Response 204 (application/json)

+ Response 400 (application/json)

  
  
     
+ Response 500 (application/json)